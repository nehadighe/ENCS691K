import { FunctionParameters, FunctionTriggerParameters } from 'amplify-function-plugin-interface';
import { LayerParameters } from './utils/layerParams';
import { ServiceName } from './utils/constants';
import { ServiceConfig } from '../supportedServicesType';
import { IsMockableResponse } from '../..';
export declare function addResource(context: any, category: any, service: any, options: any, parameters?: Partial<FunctionParameters> | FunctionTriggerParameters | Partial<LayerParameters>): Promise<string>;
export declare function addFunctionResource(context: any, category: any, service: any, serviceConfig: ServiceConfig<FunctionParameters>, parameters?: Partial<FunctionParameters> | FunctionTriggerParameters): Promise<string>;
export declare function addLayerResource(context: any, service: any, serviceConfig: ServiceConfig<LayerParameters>, parameters?: Partial<LayerParameters>): Promise<string>;
export declare function updateResource(context: any, category: any, service: any, parameters?: Partial<FunctionParameters> | FunctionTriggerParameters | Partial<LayerParameters>, resourceToUpdate?: any): Promise<any>;
export declare function updateLayerResource(context: any, service: any, serviceConfig: ServiceConfig<LayerParameters>, parameters?: Partial<LayerParameters>): Promise<void>;
export declare function updateFunctionResource(context: any, category: any, service: any, parameters: any, resourceToUpdate: any): Promise<any>;
export declare function migrateResource(context: any, projectPath: any, service: any, resourceName: any): any;
export declare function getPermissionPolicies(context: any, service: any, resourceName: any, crudOptions: any): any;
export declare function updateConfigOnEnvInit(context: any, resourceName: string, service: ServiceName): Promise<any>;
export declare function openConsole(context: any, service: ServiceName): void;
export declare function isMockable(service: ServiceName): IsMockableResponse;
//# sourceMappingURL=index.d.ts.map