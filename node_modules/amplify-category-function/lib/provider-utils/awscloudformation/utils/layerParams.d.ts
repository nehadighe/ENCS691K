import { FunctionRuntime, ProviderContext } from 'amplify-function-plugin-interface';
export declare type LayerVersionMap = Record<number, Pick<LayerVersionMetadata, 'permissions' | 'hash'>>;
export declare type LayerRuntime = Pick<FunctionRuntime, 'name' | 'value' | 'layerExecutablePath' | 'cloudTemplateValue'>;
export declare type LayerParameters = {
    layerName: string;
    runtimes: LayerRuntime[];
    providerContext: ProviderContext;
    layerVersionMap?: LayerVersionMap;
    build: boolean;
};
export declare type StoredLayerParameters = Pick<Partial<LayerParameters>, 'runtimes' | 'layerVersionMap'>;
export declare enum Permission {
    private = "private",
    public = "public",
    awsAccounts = "awsAccounts",
    awsOrg = "awsOrg"
}
export declare type LayerMetadataFactory = (layerName: string) => LayerMetadata;
export interface LayerMetadata {
    layerName: string;
    runtimes: LayerRuntime[];
    getVersion: (version: number) => LayerVersionMetadata;
    listVersions: () => number[];
    getLatestVersion: () => number;
    getHash: (version: number) => string;
    syncVersions: () => Promise<boolean>;
    updateCompatibleRuntimes: (runtimes: LayerRuntime[]) => void;
    setPermissionsForVersion: (version: number, permissions: LayerPermission[]) => void;
    setNewVersionHash: () => Promise<void>;
    toStoredLayerParameters: () => StoredLayerParameters;
}
export interface LayerVersionMetadata {
    permissions: LayerPermission[];
    hash?: string;
    listAccountAccess: () => string[];
    listOrgAccess: () => string[];
    isPrivate: () => boolean;
    isPublic: () => boolean;
}
export declare type LayerPermission = PrivateLayer | PublicLayer | AccountsLayer | OrgsLayer;
export interface PrivateLayer {
    type: Permission.private;
}
export interface PublicLayer {
    type: Permission.public;
}
export interface AccountsLayer {
    type: Permission.awsAccounts;
    accounts: string[];
}
export interface OrgsLayer {
    type: Permission.awsOrg;
    orgs: string[];
}
export declare const getLayerMetadataFactory: (context: any) => LayerMetadataFactory;
export declare function isMultiEnvLayer(context: any, layerName: string): boolean;
//# sourceMappingURL=layerParams.d.ts.map