import { ListQuestion } from 'inquirer';
import { Permission, LayerPermission } from '../utils/layerParams';
export interface LayerInputParams {
    layerPermissions?: Permission[];
    authorizedAccountIds?: string;
    authorizedOrgId?: string;
}
export declare function layerVersionQuestion(versions: number[]): {
    type: string;
    name: string;
    message: string;
    choices: number[];
}[];
export declare function layerNameQuestion(context: any): {
    type: string;
    name: string;
    message: string;
    validate: (input: any) => string | true;
    default: () => string;
}[];
export declare function layerPermissionsQuestion(params?: Permission[]): {
    type: string;
    name: string;
    message: string;
    choices: ({
        name: string;
        value: Permission;
        checked: boolean;
        short?: undefined;
    } | {
        name: string;
        short: string;
        value: Permission;
        checked: boolean;
    })[];
    default: Permission[];
}[];
export declare function layerAccountAccessQuestion(defaultAccountIds?: string[]): {
    type: string;
    name: string;
    message: string;
    validate: (input: string) => string | true;
    default: string;
}[];
export declare function layerOrgAccessQuestion(defaultOrgs?: string[]): {
    type: string;
    name: string;
    message: string;
    validate: (input: any) => string | true;
    default: string;
}[];
export declare function previousPermissionsQuestion(layerName: string): ListQuestion[];
export declare function chooseParamsOnEnvInit(context: any, layerName: string): Promise<any>;
export declare function layerInputParamsToLayerPermissionArray(parameters: LayerInputParams): LayerPermission[];
//# sourceMappingURL=layerHelpers.d.ts.map