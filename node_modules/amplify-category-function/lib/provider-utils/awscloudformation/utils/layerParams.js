"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMultiEnvLayer = exports.getLayerMetadataFactory = exports.Permission = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const amplify_cli_core_1 = require("amplify-cli-core");
const constants_1 = require("../utils/constants");
const constants_2 = require("../../../constants");
const packageLayer_1 = require("./packageLayer");
const layerRuntimes_1 = require("./layerRuntimes");
var Permission;
(function (Permission) {
    Permission["private"] = "private";
    Permission["public"] = "public";
    Permission["awsAccounts"] = "awsAccounts";
    Permission["awsOrg"] = "awsOrg";
})(Permission = exports.Permission || (exports.Permission = {}));
class LayerState {
    constructor(context, layerName) {
        this.versionMap = new Map();
        this.context = context;
        this.layerName = layerName;
        this.storedParams = getStoredLayerState(context, layerName);
        this.runtimes = isMultiEnvLayer(context, layerName)
            ? layerRuntimes_1.getLayerRuntimes(context.amplify.pathManager.getBackendDirPath(), layerName)
            : this.storedParams.runtimes;
        Object.entries(this.storedParams.layerVersionMap).forEach(([versionNumber, versionData]) => {
            this.versionMap.set(Number(versionNumber), new LayerVersionState(versionData));
        });
    }
    getVersion(version) {
        return this.versionMap.get(version);
    }
    listVersions() {
        return Array.from(this.versionMap.keys()).sort((a, b) => Number(b) - Number(a));
    }
    getLatestVersion() {
        const versions = this.listVersions();
        return versions.length > 0 ? versions[0] : undefined;
    }
    getHash(version) {
        return this.getVersion(version).hash;
    }
    async setNewVersionHash() {
        const latestVersion = this.getLatestVersion();
        if (!this.getHash(latestVersion)) {
            const newHash = this.newVersionHash || (await this.hashLayer());
            this.getVersion(latestVersion).hash = newHash;
            this.storedParams.layerVersionMap[latestVersion].hash = newHash;
            this.newVersionHash = undefined;
        }
    }
    async syncVersions() {
        const latestVersion = this.getLatestVersion();
        const currHash = this.getHash(latestVersion);
        if (!currHash) {
            return false;
        }
        this.newVersionHash = await this.hashLayer();
        if (currHash !== this.newVersionHash) {
            this.addNewLayerVersion();
            return true;
        }
        return false;
    }
    updateCompatibleRuntimes(runtimes) {
        const existingRuntimeVals = this.runtimes.map(runtime => runtime.value).sort();
        const newRuntimeVals = runtimes.map(runtime => runtime.value).sort();
        const areRuntimesSame = lodash_1.default.isEqual(existingRuntimeVals, newRuntimeVals);
        if (!areRuntimesSame) {
            this.updateRuntimes(runtimes);
            if (this.isLatestVersionFinalized()) {
                this.addNewLayerVersion();
            }
        }
    }
    setPermissionsForVersion(version, permissions) {
        this.storedParams.layerVersionMap[version].permissions = permissions;
        this.versionMap.get(version).setPermissions(permissions);
    }
    toStoredLayerParameters() {
        return lodash_1.default.cloneDeep(this.storedParams);
    }
    isLatestVersionFinalized() {
        return this.getHash(this.getLatestVersion()) !== undefined;
    }
    hashLayer() {
        const layerPath = path_1.default.join(this.context.amplify.pathManager.getBackendDirPath(), constants_2.category, this.layerName);
        return packageLayer_1.hashLayerVersionContents(layerPath);
    }
    updateRuntimes(runtimes) {
        this.runtimes = runtimes;
        this.storedParams.runtimes = runtimes;
    }
    addNewLayerVersion() {
        const currVersion = this.getLatestVersion();
        const newVersion = currVersion + 1;
        const prevPermissions = this.getVersion(currVersion).permissions;
        this.storedParams.layerVersionMap[newVersion] = {
            permissions: lodash_1.default.cloneDeep(prevPermissions),
        };
        this.versionMap.set(newVersion, new LayerVersionState(this.storedParams.layerVersionMap[newVersion]));
    }
}
class LayerVersionState {
    constructor(versionData) {
        this.permissions = [];
        this.hash = versionData.hash;
        this.setPermissions(versionData.permissions);
    }
    setPermissions(permissions) {
        this.permissions = permissions.map(permission => {
            switch (permission.type) {
                case Permission.public:
                    return {
                        type: Permission.public,
                    };
                case Permission.private:
                    return {
                        type: Permission.private,
                    };
                case Permission.awsOrg:
                    return {
                        type: Permission.awsOrg,
                        orgs: permission.orgs,
                    };
                case Permission.awsAccounts:
                    return {
                        type: Permission.awsAccounts,
                        accounts: permission.accounts,
                    };
            }
        });
    }
    listAccountAccess() {
        const permissionIsAccount = (permission) => permission.type === Permission.awsAccounts;
        const accountPermissions = this.permissions.find(permissionIsAccount);
        return accountPermissions ? accountPermissions.accounts : [];
    }
    listOrgAccess() {
        const permissionIsOrg = (permission) => permission.type === Permission.awsOrg;
        const orgPermissions = this.permissions.find(permissionIsOrg);
        return orgPermissions ? orgPermissions.orgs : [];
    }
    isPrivate() {
        return !!this.permissions.map(perm => perm.type).find(type => type === Permission.private);
    }
    isPublic() {
        return !!this.permissions.map(perm => perm.type).find(type => type === Permission.public);
    }
}
exports.getLayerMetadataFactory = (context) => {
    return layerName => {
        return new LayerState(context, layerName);
    };
};
function isMultiEnvLayer(context, layerName) {
    const layerParametersPath = path_1.default.join(context.amplify.pathManager.getBackendDirPath(), constants_1.categoryName, layerName, constants_1.layerParametersFileName);
    return !fs_extra_1.default.existsSync(layerParametersPath);
}
exports.isMultiEnvLayer = isMultiEnvLayer;
const getStoredLayerState = (context, layerName) => {
    if (isMultiEnvLayer(context, layerName)) {
        const teamProviderInfoPath = context.amplify.pathManager.getProviderInfoFilePath();
        const { envName } = context.amplify.getEnvInfo();
        if (!fs_extra_1.default.existsSync(teamProviderInfoPath)) {
            throw new Error('team-provider-info.json is missing');
        }
        const teamProviderInfo = amplify_cli_core_1.JSONUtilities.readJson(teamProviderInfoPath);
        let layerState = lodash_1.default.get(teamProviderInfo, [envName, 'nonCFNdata', constants_1.categoryName, layerName], undefined);
        if (layerState === undefined) {
            layerState = lodash_1.default.get(context.amplify.getProjectMeta(), [constants_1.categoryName, layerName], undefined);
            if (layerState === undefined) {
                throw new Error('Local layer state missing from team-provider-info.json and amplify-meta.json');
            }
            lodash_1.default.set(teamProviderInfo, [envName, 'nonCFNdata', constants_1.categoryName, layerName], layerState);
            amplify_cli_core_1.JSONUtilities.writeJson(teamProviderInfoPath, teamProviderInfo);
        }
        return layerState;
    }
    else {
        const projectBackendDirPath = context.amplify.pathManager.getBackendDirPath();
        const resourceDirPath = path_1.default.join(projectBackendDirPath, constants_1.categoryName, layerName);
        if (!fs_extra_1.default.existsSync(resourceDirPath)) {
            return undefined;
        }
        const parametersFilePath = path_1.default.join(resourceDirPath, constants_1.layerParametersFileName);
        return amplify_cli_core_1.JSONUtilities.readJson(parametersFilePath);
    }
};
//# sourceMappingURL=layerParams.js.map