"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryUpdateTopLevelComment = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const constants_1 = require("../../../constants");
const lodash_1 = __importDefault(require("lodash"));
exports.tryUpdateTopLevelComment = (resourceDirPath, envVars) => {
    const newComment = createTopLevelComment(envVars);
    const appJSFilePath = path_1.default.join(resourceDirPath, 'src', 'app.js');
    const indexJSFilePath = path_1.default.join(resourceDirPath, 'src', 'index.js');
    if (fs_extra_1.default.existsSync(appJSFilePath)) {
        updateTopLevelComment(appJSFilePath, newComment);
    }
    else if (fs_extra_1.default.existsSync(indexJSFilePath)) {
        updateTopLevelComment(indexJSFilePath, newComment);
    }
};
const createTopLevelComment = (envVars) => `${constants_1.topLevelCommentPrefix}${envVars.sort().join('\n\t')}${constants_1.topLevelCommentSuffix}`;
const updateTopLevelComment = (filePath, newComment) => {
    const commentRegex = new RegExp(`${lodash_1.default.escapeRegExp(constants_1.topLevelCommentPrefix)}[a-zA-Z0-9\\-\\s._=]+${lodash_1.default.escapeRegExp(constants_1.topLevelCommentSuffix)}`);
    let fileContents = fs_extra_1.default.readFileSync(filePath).toString();
    const commentMatches = fileContents.match(commentRegex);
    if (!commentMatches || commentMatches.length === 0) {
        fileContents = newComment + fileContents;
    }
    else {
        fileContents = fileContents.replace(commentRegex, newComment);
    }
    fs_extra_1.default.writeFileSync(filePath, fileContents);
};
//# sourceMappingURL=updateTopLevelComment.js.map