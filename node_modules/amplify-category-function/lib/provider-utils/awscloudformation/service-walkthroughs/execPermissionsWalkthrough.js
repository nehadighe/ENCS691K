"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.askExecRolePermissionsQuestions = void 0;
const cloudformationHelpers_1 = require("../utils/cloudformationHelpers");
const inquirer_1 = __importDefault(require("inquirer"));
const path_1 = __importDefault(require("path"));
const TransformPackage = __importStar(require("graphql-transformer-core"));
const lodash_1 = __importDefault(require("lodash"));
const constants_1 = require("../../../constants");
const permissionMapUtils_1 = require("../utils/permissionMapUtils");
const constants_2 = require("../utils/constants");
const appSyncHelper_1 = require("../utils/appSyncHelper");
const amplify_cli_core_1 = require("amplify-cli-core");
exports.askExecRolePermissionsQuestions = async (context, lambdaFunctionToUpdate, currentPermissionMap, currentEnvMap) => {
    const amplifyMeta = amplify_cli_core_1.stateManager.getMeta();
    const categories = Object.keys(amplifyMeta).filter(category => category !== 'providers');
    const appsyncResourceName = appSyncHelper_1.getAppSyncResourceName();
    if (!categories.includes('storage') && appsyncResourceName !== undefined) {
        categories.push('storage');
    }
    const categoryPermissionQuestion = {
        type: 'checkbox',
        name: 'categories',
        message: 'Select the category',
        choices: categories,
        default: permissionMapUtils_1.fetchPermissionCategories(currentPermissionMap),
    };
    const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
    const categoryPermissionAnswer = await inquirer_1.default.prompt([categoryPermissionQuestion]);
    const selectedCategories = categoryPermissionAnswer.categories;
    let categoryPolicies = [];
    let resources = [];
    const crudOptions = lodash_1.default.values(constants_1.CRUDOperation);
    const permissions = {};
    const backendDir = context.amplify.pathManager.getBackendDirPath();
    for (let category of selectedCategories) {
        let resourcesList = category in amplifyMeta ? Object.keys(amplifyMeta[category]) : [];
        if (category === 'storage' && 'api' in amplifyMeta) {
            if (appsyncResourceName) {
                const resourceDirPath = path_1.default.join(backendDir, 'api', appsyncResourceName);
                const project = await TransformPackage.readProjectConfiguration(resourceDirPath);
                const directivesMap = TransformPackage.collectDirectivesByTypeNames(project.schema);
                const modelNames = Object.keys(directivesMap.types)
                    .filter(typeName => directivesMap.types[typeName].includes('model'))
                    .map(modelName => `${modelName}:${constants_2.appsyncTableSuffix}`);
                resourcesList.push(...modelNames);
            }
        }
        else if (category === 'function') {
            resourcesList = resourcesList.filter(resourceName => resourceName !== lambdaFunctionToUpdate && amplifyMeta[category][resourceName].service === "Lambda");
        }
        if (resourcesList.length === 0) {
            context.print.warning(`No resources found for ${category}`);
            continue;
        }
        try {
            let selectedResources = [];
            if (resourcesList.length === 1) {
                context.print.info(`${capitalizeFirstLetter(category)} category has a resource called ${resourcesList[0]}`);
                selectedResources = [resourcesList[0]];
            }
            else {
                const resourceQuestion = {
                    type: 'checkbox',
                    name: 'resources',
                    message: `${capitalizeFirstLetter(category)} has ${resourcesList.length} resources in this project. Select the one you would like your Lambda to access`,
                    choices: resourcesList,
                    validate: value => {
                        if (value.length === 0) {
                            return 'You must select at least resource';
                        }
                        return true;
                    },
                    default: permissionMapUtils_1.fetchPermissionResourcesForCategory(currentPermissionMap, category),
                };
                const resourceAnswer = await inquirer_1.default.prompt([resourceQuestion]);
                selectedResources = resourceAnswer.resources;
            }
            for (let resourceName of selectedResources) {
                const pluginInfo = context.amplify.getCategoryPluginInfo(context, category, resourceName);
                const { getPermissionPolicies } = await Promise.resolve().then(() => __importStar(require(pluginInfo.packageLocation)));
                if (!getPermissionPolicies) {
                    context.print.warning(`Policies cannot be added for ${category}/${resourceName}`);
                    continue;
                }
                else if (amplifyMeta[category] &&
                    amplifyMeta[category][resourceName] &&
                    amplifyMeta[category][resourceName].service === 'S3AndCloudFront' &&
                    !amplifyMeta[category][resourceName].providerPlugin) {
                    context.print.warning(`Policies cannot be added for ${category}/${resourceName}, since it is a MobileHub imported resource.`);
                    continue;
                }
                else {
                    const crudPermissionQuestion = {
                        type: 'checkbox',
                        name: 'crudOptions',
                        message: `Select the operations you want to permit for ${resourceName}`,
                        choices: crudOptions,
                        validate: value => {
                            if (value.length === 0) {
                                return 'You must select at least one operation';
                            }
                            return true;
                        },
                        default: permissionMapUtils_1.fetchPermissionsForResourceInCategory(currentPermissionMap, category, resourceName),
                    };
                    const crudPermissionAnswer = await inquirer_1.default.prompt([crudPermissionQuestion]);
                    const resourcePolicy = crudPermissionAnswer.crudOptions;
                    if (resourceName.endsWith(constants_2.appsyncTableSuffix)) {
                        resourcePolicy.providerPlugin = 'awscloudformation';
                        resourcePolicy.service = 'DynamoDB';
                        const dynamoDBTableARNComponents = cloudformationHelpers_1.constructCFModelTableArnComponent(appsyncResourceName, resourceName, constants_2.appsyncTableSuffix);
                        resourcePolicy.customPolicyResource = [
                            {
                                'Fn::Join': ['', dynamoDBTableARNComponents],
                            },
                            {
                                'Fn::Join': ['', [...dynamoDBTableARNComponents, '/index/*']],
                            },
                        ];
                    }
                    const { permissionPolicies, resourceAttributes } = await getPermissionPolicies(context, { [resourceName]: resourcePolicy });
                    categoryPolicies = categoryPolicies.concat(permissionPolicies);
                    if (!permissions[category]) {
                        permissions[category] = {};
                    }
                    permissions[category][resourceName] = resourcePolicy;
                    resources = resources.concat(resourceAttributes.map(attributes => attributes.resourceName && attributes.resourceName.endsWith(constants_2.appsyncTableSuffix)
                        ? {
                            resourceName: appsyncResourceName,
                            category: 'api',
                            attributes: ['GraphQLAPIIdOutput'],
                            needsAdditionalDynamoDBResourceProps: true,
                            _modelName: attributes.resourceName.replace(`:${constants_2.appsyncTableSuffix}`, 'Table'),
                            _cfJoinComponentTableName: cloudformationHelpers_1.constructCFModelTableNameComponent(appsyncResourceName, attributes.resourceName, constants_2.appsyncTableSuffix),
                            _cfJoinComponentTableArn: cloudformationHelpers_1.constructCFModelTableArnComponent(appsyncResourceName, attributes.resourceName, constants_2.appsyncTableSuffix),
                        }
                        : attributes));
                }
            }
        }
        catch (e) {
            context.print.warning(`Policies cannot be added for ${category}`);
            context.print.info(e.stack);
            context.usageData.emitError(e);
            process.exitCode = 1;
        }
    }
    const environmentMap = {};
    const envVars = new Set();
    const dependsOn = [];
    resources.forEach(resource => {
        const { category, resourceName, attributes } = resource;
        if (resource.needsAdditionalDynamoDBResourceProps) {
            const modelEnvPrefix = `${category.toUpperCase()}_${resourceName.toUpperCase()}_${resource._modelName.toUpperCase()}`;
            const modelEnvNameKey = `${modelEnvPrefix}_NAME`;
            const modelEnvArnKey = `${modelEnvPrefix}_ARN`;
            environmentMap[modelEnvNameKey] = resource._cfJoinComponentTableName;
            environmentMap[modelEnvArnKey] = {
                'Fn::Join': ['', resource._cfJoinComponentTableArn],
            };
            envVars.add(modelEnvNameKey);
            envVars.add(modelEnvArnKey);
        }
        attributes.forEach(attribute => {
            const envName = `${category.toUpperCase()}_${resourceName.toUpperCase()}_${attribute.toUpperCase()}`;
            const refName = `${category}${resourceName}${attribute}`;
            environmentMap[envName] = { Ref: refName };
            envVars.add(envName);
        });
        if (!dependsOn.find(dep => dep.resourceName === resourceName)) {
            dependsOn.push({
                category: resource.category,
                resourceName: resource.resourceName,
                attributes: resource.attributes,
            });
        }
    });
    if (currentEnvMap) {
        lodash_1.default.keys(currentEnvMap).forEach(key => {
            envVars.add(key);
        });
    }
    const envVarStringList = Array.from(envVars)
        .sort()
        .join('\n\t');
    context.print.info(`${constants_1.envVarPrintoutPrefix}${envVarStringList}`);
    return {
        dependsOn,
        topLevelComment: `${constants_1.topLevelCommentPrefix}${envVarStringList}${constants_1.topLevelCommentSuffix}`,
        environmentMap,
        mutableParametersState: { permissions },
        categoryPolicies,
    };
};
//# sourceMappingURL=execPermissionsWalkthrough.js.map