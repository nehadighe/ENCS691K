"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateLayerWalkthrough = exports.createLayerWalkthrough = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
const lodash_1 = __importDefault(require("lodash"));
const layerParams_1 = require("../utils/layerParams");
const functionPluginLoader_1 = require("../utils/functionPluginLoader");
const layerHelpers_1 = require("../utils/layerHelpers");
const amplify_cli_core_1 = require("amplify-cli-core");
async function createLayerWalkthrough(context, parameters = {}) {
    lodash_1.default.assign(parameters, await inquirer_1.default.prompt(layerHelpers_1.layerNameQuestion(context)));
    let runtimeReturn = await functionPluginLoader_1.runtimeWalkthrough(context, parameters);
    parameters.runtimes = runtimeReturn.map(val => val.runtime);
    let layerInputParameters = {};
    lodash_1.default.assign(layerInputParameters, await inquirer_1.default.prompt(layerHelpers_1.layerPermissionsQuestion()));
    for (let permission of layerInputParameters.layerPermissions) {
        switch (permission) {
            case layerParams_1.Permission.awsAccounts:
                lodash_1.default.assign(layerInputParameters, await inquirer_1.default.prompt(layerHelpers_1.layerAccountAccessQuestion()));
                break;
            case layerParams_1.Permission.awsOrg:
                lodash_1.default.assign(layerInputParameters, await inquirer_1.default.prompt(layerHelpers_1.layerOrgAccessQuestion()));
                break;
        }
    }
    parameters.layerVersionMap = {
        1: {
            permissions: layerHelpers_1.layerInputParamsToLayerPermissionArray(layerInputParameters),
        },
    };
    parameters.build = true;
    return parameters;
}
exports.createLayerWalkthrough = createLayerWalkthrough;
async function updateLayerWalkthrough(context, lambdaToUpdate, parameters) {
    const { allResources } = await context.amplify.getResourceStatus();
    const resources = allResources.filter(resource => resource.service === "LambdaLayer").map(resource => resource.resourceName);
    if (resources.length === 0) {
        const errMessage = 'No Lambda layer resource to update. Please use "amplify add function" to create a new Layer';
        context.print.error(errMessage);
        context.usageData.emitError(new amplify_cli_core_1.ResourceDoesNotExistError(errMessage));
        amplify_cli_core_1.exitOnNextTick(0);
    }
    const resourceQuestion = [
        {
            name: 'resourceName',
            message: 'Select the Lambda layer to update:',
            type: 'list',
            choices: resources,
        },
    ];
    if (resources.length === 1) {
        parameters.layerName = resources[0];
    }
    else {
        const resourceAnswer = await inquirer_1.default.prompt(resourceQuestion);
        parameters.layerName = resourceAnswer.resourceName;
    }
    const layerState = layerParams_1.getLayerMetadataFactory(context)(parameters.layerName);
    await layerState.syncVersions();
    parameters.runtimes = layerState.runtimes || [];
    if (await context.amplify.confirmPrompt('Do you want to update the compatible runtimes?', false)) {
        const runtimeReturn = await functionPluginLoader_1.runtimeWalkthrough(context, parameters);
        layerState.updateCompatibleRuntimes(runtimeReturn.map(val => val.runtime));
    }
    let layerInputParameters = {};
    if (await context.amplify.confirmPrompt('Do you want to adjust layer version permissions?', true)) {
        const selectedVersion = Number((await inquirer_1.default.prompt(layerHelpers_1.layerVersionQuestion(layerState.listVersions()))).layerVersion);
        const defaultLayerPermissions = layerState.getVersion(selectedVersion).permissions.map(permission => permission.type);
        const defaultOrgs = layerState.getVersion(selectedVersion).listOrgAccess();
        const defaultAccounts = layerState.getVersion(selectedVersion).listAccountAccess();
        lodash_1.default.assign(layerInputParameters, await inquirer_1.default.prompt(layerHelpers_1.layerPermissionsQuestion(defaultLayerPermissions)));
        for (let permission of layerInputParameters.layerPermissions) {
            switch (permission) {
                case layerParams_1.Permission.awsAccounts:
                    lodash_1.default.assign(layerInputParameters, await inquirer_1.default.prompt(layerHelpers_1.layerAccountAccessQuestion(defaultAccounts)));
                    break;
                case layerParams_1.Permission.awsOrg:
                    lodash_1.default.assign(layerInputParameters, await inquirer_1.default.prompt(layerHelpers_1.layerOrgAccessQuestion(defaultOrgs)));
                    break;
            }
        }
        const layerPermissions = layerHelpers_1.layerInputParamsToLayerPermissionArray(layerInputParameters);
        layerState.setPermissionsForVersion(selectedVersion, layerPermissions);
    }
    lodash_1.default.assign(parameters, layerState.toStoredLayerParameters());
    parameters.build = true;
    return parameters;
}
exports.updateLayerWalkthrough = updateLayerWalkthrough;
//# sourceMappingURL=lambdaLayerWalkthrough.js.map