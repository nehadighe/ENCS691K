"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execAsStringPromise = exports.majMinPyVersion = exports.getPipenvDir = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const execa_1 = __importDefault(require("execa"));
async function getPipenvDir(srcRoot) {
    const pipEnvDir = await execAsStringPromise('pipenv --venv', { cwd: srcRoot });
    const pyVersion = await execAsStringPromise('python3 --version');
    let pipEnvPath = path_1.default.join(pipEnvDir, 'lib', 'python' + majMinPyVersion(pyVersion), 'site-packages');
    if (process.platform.startsWith('win')) {
        pipEnvPath = path_1.default.join(pipEnvDir, 'Lib', 'site-packages');
    }
    if (fs_extra_1.default.existsSync(pipEnvPath)) {
        return pipEnvPath;
    }
    throw new Error(`Could not find a pipenv site-packages directory at ${pipEnvPath}`);
}
exports.getPipenvDir = getPipenvDir;
function majMinPyVersion(pyVersion) {
    if (!/^Python \d+\.\d+\.\d+$/.test(pyVersion)) {
        throw new Error(`Cannot interpret Python version "${pyVersion}"`);
    }
    const versionNum = pyVersion.split(' ')[1];
    return versionNum
        .split('.')
        .slice(0, 2)
        .join('.');
}
exports.majMinPyVersion = majMinPyVersion;
async function execAsStringPromise(command, opts) {
    try {
        let stdout = (await execa_1.default.command(command, opts)).stdout;
        if (stdout) {
            stdout = stdout.trim();
        }
        return stdout;
    }
    catch (err) {
        throw new Error(`Recieved error [${err}] running command [${command}]`);
    }
}
exports.execAsStringPromise = execAsStringPromise;
//# sourceMappingURL=pyUtils.js.map