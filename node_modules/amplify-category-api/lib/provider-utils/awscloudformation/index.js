"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPermissionPolicies = exports.addDatasource = exports.migrateResource = exports.updateResource = exports.addResource = exports.console = void 0;
const service_walkthrough_result_to_add_api_request_1 = require("./utils/service-walkthrough-result-to-add-api-request");
const cfn_api_artifact_handler_1 = require("./cfn-api-artifact-handler");
const dynamic_imports_1 = require("./utils/dynamic-imports");
const legacy_add_resource_1 = require("./legacy-add-resource");
const legacy_update_resource_1 = require("./legacy-update-resource");
const edit_schema_flow_1 = require("./utils/edit-schema-flow");
const amplify_cli_core_1 = require("amplify-cli-core");
async function console(context, service) {
    const { serviceWalkthroughFilename } = await dynamic_imports_1.serviceMetadataFor(service);
    const serviceWalkthroughSrc = `${__dirname}/service-walkthroughs/${serviceWalkthroughFilename}`;
    const { openConsole } = require(serviceWalkthroughSrc);
    if (!openConsole) {
        const errMessage = 'Opening console functionality not available for this option';
        context.print.error(errMessage);
        context.usageData.emitError(new amplify_cli_core_1.NotImplementedError(errMessage));
        amplify_cli_core_1.exitOnNextTick(0);
    }
    return openConsole(context);
}
exports.console = console;
async function addResource(context, category, service, options) {
    const serviceMetadata = await dynamic_imports_1.serviceMetadataFor(service);
    const { serviceWalkthroughFilename, defaultValuesFilename } = serviceMetadata;
    const serviceWalkthrough = await dynamic_imports_1.getServiceWalkthrough(serviceWalkthroughFilename);
    const serviceWalkthroughPromise = serviceWalkthrough(context, defaultValuesFilename, serviceMetadata);
    switch (service) {
        case 'AppSync':
            const walkthroughResult = await serviceWalkthroughPromise;
            const askToEdit = walkthroughResult.askToEdit;
            const apiName = await cfn_api_artifact_handler_1.getCfnApiArtifactHandler(context).createArtifacts(service_walkthrough_result_to_add_api_request_1.serviceWalkthroughResultToAddApiRequest(walkthroughResult));
            if (askToEdit) {
                await edit_schema_flow_1.editSchemaFlow(context, apiName);
            }
            return apiName;
        default:
            return legacy_add_resource_1.legacyAddResource(serviceWalkthroughPromise, context, category, service, options);
    }
}
exports.addResource = addResource;
async function updateResource(context, category, service) {
    const serviceMetadata = await dynamic_imports_1.serviceMetadataFor(service);
    const { defaultValuesFilename, serviceWalkthroughFilename } = serviceMetadata;
    const serviceWalkthroughSrc = `${__dirname}/service-walkthroughs/${serviceWalkthroughFilename}`;
    const { updateWalkthrough } = require(serviceWalkthroughSrc);
    if (!updateWalkthrough) {
        const errMessage = 'Update functionality not available for this option';
        context.print.error(errMessage);
        context.usageData.emitError(new amplify_cli_core_1.NotImplementedError(errMessage));
        amplify_cli_core_1.exitOnNextTick(0);
    }
    const updateWalkthroughPromise = updateWalkthrough(context, defaultValuesFilename, serviceMetadata);
    switch (service) {
        case 'AppSync':
            return updateWalkthroughPromise.then(cfn_api_artifact_handler_1.getCfnApiArtifactHandler(context).updateArtifacts);
        default:
            return legacy_update_resource_1.legacyUpdateResource(updateWalkthroughPromise, context, category, service);
    }
}
exports.updateResource = updateResource;
async function migrateResource(context, projectPath, service, resourceName) {
    const serviceMetadata = await dynamic_imports_1.serviceMetadataFor(service);
    const { serviceWalkthroughFilename } = serviceMetadata;
    const serviceWalkthroughSrc = `${__dirname}/service-walkthroughs/${serviceWalkthroughFilename}`;
    const { migrate } = require(serviceWalkthroughSrc);
    if (!migrate) {
        context.print.info(`No migration required for ${resourceName}`);
        return;
    }
    return await migrate(context, projectPath, resourceName);
}
exports.migrateResource = migrateResource;
async function addDatasource(context, category, datasource) {
    const serviceMetadata = await dynamic_imports_1.datasourceMetadataFor(datasource);
    const { defaultValuesFilename, serviceWalkthroughFilename } = serviceMetadata;
    return (await dynamic_imports_1.getServiceWalkthrough(serviceWalkthroughFilename))(context, defaultValuesFilename, serviceMetadata);
}
exports.addDatasource = addDatasource;
async function getPermissionPolicies(context, service, resourceName, crudOptions) {
    const serviceMetadata = await dynamic_imports_1.serviceMetadataFor(service);
    const { serviceWalkthroughFilename } = serviceMetadata;
    const serviceWalkthroughSrc = `${__dirname}/service-walkthroughs/${serviceWalkthroughFilename}`;
    const { getIAMPolicies } = require(serviceWalkthroughSrc);
    if (!getIAMPolicies) {
        context.print.info(`No policies found for ${resourceName}`);
        return;
    }
    return getIAMPolicies(resourceName, crudOptions, context);
}
exports.getPermissionPolicies = getPermissionPolicies;
//# sourceMappingURL=index.js.map