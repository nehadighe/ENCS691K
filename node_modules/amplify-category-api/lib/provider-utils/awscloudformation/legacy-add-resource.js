"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyCfnTemplate = exports.legacyAddResource = void 0;
const dynamic_imports_1 = require("./utils/dynamic-imports");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const aws_constants_1 = require("./aws-constants");
exports.legacyAddResource = async (serviceWalkthroughPromise, context, category, service, options) => {
    let answers;
    let { cfnFilename } = await dynamic_imports_1.serviceMetadataFor(service);
    const projectBackendDirPath = context.amplify.pathManager.getBackendDirPath();
    const result = await serviceWalkthroughPromise;
    if (result.answers) {
        ({ answers } = result);
        options.dependsOn = result.dependsOn;
    }
    else {
        answers = result;
    }
    if (result.output) {
        options.output = result.output;
    }
    if (!result.noCfnFile) {
        if (answers.customCfnFile) {
            cfnFilename = answers.customCfnFile;
        }
        addPolicyResourceNameToPaths(answers.paths);
        exports.copyCfnTemplate(context, category, answers, cfnFilename);
        const parameters = { ...answers };
        const cfnParameters = {
            authRoleName: {
                Ref: 'AuthRoleName',
            },
            unauthRoleName: {
                Ref: 'UnauthRoleName',
            },
        };
        const resourceDirPath = path_1.default.join(projectBackendDirPath, category, parameters.resourceName);
        fs_extra_1.default.ensureDirSync(resourceDirPath);
        const parametersFilePath = path_1.default.join(resourceDirPath, aws_constants_1.parametersFileName);
        let jsonString = JSON.stringify(parameters, null, 4);
        fs_extra_1.default.writeFileSync(parametersFilePath, jsonString, 'utf8');
        const cfnParametersFilePath = path_1.default.join(resourceDirPath, aws_constants_1.cfnParametersFilename);
        jsonString = JSON.stringify(cfnParameters, null, 4);
        fs_extra_1.default.writeFileSync(cfnParametersFilePath, jsonString, 'utf8');
    }
    context.amplify.updateamplifyMetaAfterResourceAdd(category, answers.resourceName, options);
    return answers.resourceName;
};
exports.copyCfnTemplate = (context, category, options, cfnFilename) => {
    const { amplify } = context;
    const targetDir = amplify.pathManager.getBackendDirPath();
    const copyJobs = [
        {
            dir: path_1.default.join(aws_constants_1.rootAssetDir, 'cloudformation-templates'),
            template: cfnFilename,
            target: `${targetDir}/${category}/${options.resourceName}/${options.resourceName}-cloudformation-template.json`,
        },
    ];
    return context.amplify.copyBatch(context, copyJobs, options, true, false);
};
const addPolicyResourceNameToPaths = paths => {
    if (Array.isArray(paths)) {
        paths.forEach(p => {
            const pathName = p.name;
            if (typeof pathName === 'string') {
                p.policyResourceName = pathName.replace(/{[a-zA-Z0-9\-]+}/g, '*');
            }
        });
    }
};
//# sourceMappingURL=legacy-add-resource.js.map