const inquirer = require('inquirer');
const ora = require('ora');
const { DataApiParams } = require('graphql-relational-schema-transformer');
const { ResourceDoesNotExistError, ResourceCredentialsNotFoundError, exitOnNextTick } = require('amplify-cli-core');
const spinner = ora('');
const category = 'api';
const providerName = 'awscloudformation';
async function serviceWalkthrough(context, defaultValuesFilename, datasourceMetadata) {
    const amplifyMeta = context.amplify.getProjectMeta();
    if (amplifyMeta == null || amplifyMeta[category] == null || Object.keys(amplifyMeta[category]).length === 0) {
        const errMessage = 'You must create an AppSync API in your project before adding a graphql datasource. Please use "amplify api add" to create the API.';
        context.print.error(errMessage);
        context.usageData.emitError(new ResourceDoesNotExistError(errMessage));
        exitOnNextTick(0);
    }
    let appSyncApi;
    const apis = Object.keys(amplifyMeta[category]);
    for (let i = 0; i < apis.length; i += 1) {
        if (amplifyMeta[category][apis[i]].service === 'AppSync') {
            appSyncApi = apis[i];
            break;
        }
    }
    if (!appSyncApi) {
        const errMessage = 'You must create an AppSync API in your project before adding a graphql datasource. Please use "amplify api add" to create the API.';
        context.print.error(errMessage);
        context.usageData.emitError(new ResourceDoesNotExistError(errMessage));
        exitOnNextTick(0);
    }
    const { inputs, availableRegions } = datasourceMetadata;
    const selectedRegion = await promptWalkthroughQuestion(inputs, 0, availableRegions);
    const AWS = await getAwsClient(context, 'list');
    AWS.config.update({
        region: selectedRegion,
    });
    const { selectedClusterArn, clusterResourceId } = await selectCluster(context, inputs, AWS);
    const selectedSecretArn = await getSecretStoreArn(context, inputs, clusterResourceId, AWS);
    const selectedDatabase = await selectDatabase(context, inputs, selectedClusterArn, selectedSecretArn, AWS);
    return {
        region: selectedRegion,
        dbClusterArn: selectedClusterArn,
        secretStoreArn: selectedSecretArn,
        databaseName: selectedDatabase,
        resourceName: appSyncApi,
    };
}
async function selectCluster(context, inputs, AWS) {
    const RDS = new AWS.RDS();
    const describeDBClustersResult = await RDS.describeDBClusters().promise();
    const rawClusters = describeDBClustersResult.DBClusters;
    const clusters = new Map();
    for (let i = 0; i < rawClusters.length; i += 1) {
        if (rawClusters[i].EngineMode === 'serverless') {
            clusters.set(rawClusters[i].DBClusterIdentifier, rawClusters[i]);
        }
    }
    if (clusters.size > 0) {
        const clusterIdentifier = await promptWalkthroughQuestion(inputs, 1, Array.from(clusters.keys()));
        const selectedCluster = clusters.get(clusterIdentifier);
        return {
            selectedClusterArn: selectedCluster.DBClusterArn,
            clusterResourceId: selectedCluster.DbClusterResourceId,
        };
    }
    const errMessage = 'No properly configured Aurora Serverless clusters found.';
    context.print.error(errMessage);
    context.usageData.emitError(new ResourceDoesNotExistError(errMessage));
    exitOnNextTick(0);
}
async function getSecretStoreArn(context, inputs, clusterResourceId, AWS) {
    const SecretsManager = new AWS.SecretsManager();
    const NextToken = 'NextToken';
    let rawSecrets = [];
    const params = {
        MaxResults: 20,
    };
    const listSecretsResult = await SecretsManager.listSecrets(params).promise();
    rawSecrets = listSecretsResult.SecretList;
    let token = listSecretsResult.NextToken;
    while (token) {
        params[NextToken] = token;
        const tempSecretsResult = await SecretsManager.listSecrets(params).promise();
        rawSecrets = [...rawSecrets, ...tempSecretsResult.SecretList];
        token = tempSecretsResult.NextToken;
    }
    const secrets = new Map();
    let selectedSecretArn;
    for (let i = 0; i < rawSecrets.length; i += 1) {
        if (rawSecrets[i].Name.startsWith(`rds-db-credentials/${clusterResourceId}`)) {
            selectedSecretArn = rawSecrets[i].ARN;
            break;
        }
        secrets.set(rawSecrets[i].Name, rawSecrets[i].ARN);
    }
    if (!selectedSecretArn) {
        if (secrets.size > 0) {
            const selectedSecretName = await promptWalkthroughQuestion(inputs, 2, Array.from(secrets.keys()));
            selectedSecretArn = secrets.get(selectedSecretName);
        }
        else {
            const errMessage = 'No RDS access credentials found in the AWS Secrect Manager.';
            context.print.error(errMessage);
            context.usageData.emitError(new ResourceCredentialsNotFoundError(errMessage));
            exitOnNextTick(0);
        }
    }
    return selectedSecretArn;
}
async function selectDatabase(context, inputs, clusterArn, secretArn, AWS) {
    const DataApi = new AWS.RDSDataService();
    const params = new DataApiParams();
    params.secretArn = secretArn;
    params.resourceArn = clusterArn;
    params.sql = 'SHOW databases';
    spinner.start('Fetching Aurora Serverless cluster...');
    const dataApiResult = await DataApi.executeStatement(params).promise();
    const records = dataApiResult.records;
    const databaseList = [];
    for (let i = 0; i < records.length; i += 1) {
        const recordValue = records[i][0].stringValue;
        if (!['information_schema', 'performance_schema', 'mysql'].includes(recordValue)) {
            databaseList.push(recordValue);
        }
    }
    spinner.succeed('Fetched Aurora Serverless cluster.');
    if (databaseList.length > 0) {
        return await promptWalkthroughQuestion(inputs, 3, databaseList);
    }
    const errMessage = 'No properly configured databases found.';
    context.print.error(errMessage);
    context.usageData.emitError(new ResourceDoesNotExistError(errMessage));
    exitOnNextTick(0);
}
async function promptWalkthroughQuestion(inputs, questionNumber, choicesList) {
    const question = [
        {
            type: inputs[questionNumber].type,
            name: inputs[questionNumber].key,
            message: inputs[questionNumber].question,
            choices: choicesList,
        },
    ];
    const answer = await inquirer.prompt(question);
    return answer[inputs[questionNumber].key];
}
async function getAwsClient(context, action) {
    const providerPlugins = context.amplify.getProviderPlugins(context);
    const provider = require(providerPlugins[providerName]);
    return await provider.getConfiguredAWSClient(context, 'aurora-serverless', action);
}
module.exports = {
    serviceWalkthrough,
};
//# sourceMappingURL=appSync-rds-walkthrough.js.map