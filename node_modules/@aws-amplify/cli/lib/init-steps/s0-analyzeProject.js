"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.analyzeProject = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const inquirer = __importStar(require("inquirer"));
const editor_selection_1 = require("../extensions/amplify-helpers/editor-selection");
const project_name_validation_1 = require("../extensions/amplify-helpers/project-name-validation");
const constants_1 = require("../extensions/amplify-helpers/constants");
const amplify_cli_core_1 = require("amplify-cli-core");
async function analyzeProject(context) {
    if (!context.parameters.options.app) {
        context.print.warning('Note: It is recommended to run this command from the root of your app directory');
    }
    const projectPath = process.cwd();
    context.exeInfo.isNewProject = isNewProject(context);
    const projectName = await getProjectName(context);
    const envName = await getEnvName(context);
    let defaultEditor = getDefaultEditor();
    if (!defaultEditor) {
        defaultEditor = await getEditor(context);
    }
    context.exeInfo.isNewEnv = isNewEnv(envName);
    if ((context.exeInfo.inputParams && context.exeInfo.inputParams.yes) || context.parameters.options.forcePush) {
        context.exeInfo.forcePush = true;
    }
    else {
        context.exeInfo.forcePush = false;
    }
    context.exeInfo.projectConfig = {
        projectName,
        version: constants_1.amplifyCLIConstants.PROJECT_CONFIG_VERSION,
    };
    context.exeInfo.localEnvInfo = {
        projectPath,
        defaultEditor,
        envName,
    };
    context.exeInfo.teamProviderInfo = {};
    context.exeInfo.metaData = {};
    return context;
}
exports.analyzeProject = analyzeProject;
async function getProjectName(context) {
    let projectName;
    const projectPath = process.cwd();
    if (!context.exeInfo.isNewProject) {
        const projectConfig = amplify_cli_core_1.stateManager.getProjectConfig(projectPath);
        projectName = projectConfig.projectName;
        return projectName;
    }
    if (context.exeInfo.inputParams.amplify && context.exeInfo.inputParams.amplify.projectName) {
        projectName = project_name_validation_1.normalizeProjectName(context.exeInfo.inputParams.amplify.projectName);
    }
    else {
        projectName = project_name_validation_1.normalizeProjectName(path.basename(projectPath));
        if (!context.exeInfo.inputParams.yes) {
            const projectNameQuestion = {
                type: 'input',
                name: 'inputProjectName',
                message: 'Enter a name for the project',
                default: projectName,
                validate: input => project_name_validation_1.isProjectNameValid(input) || 'Project name should be between 3 and 20 characters and alphanumeric',
            };
            const answer = await inquirer.prompt(projectNameQuestion);
            projectName = answer.inputProjectName;
        }
    }
    return projectName;
}
async function getEditor(context) {
    let editor;
    if (context.exeInfo.inputParams.amplify && context.exeInfo.inputParams.amplify.defaultEditor) {
        editor = editor_selection_1.normalizeEditor(context.exeInfo.inputParams.amplify.defaultEditor);
    }
    else if (!context.exeInfo.inputParams.yes) {
        editor = await editor_selection_1.editorSelection(editor);
    }
    return editor;
}
async function getEnvName(context) {
    let envName;
    const isEnvNameValid = inputEnvName => {
        return /^[a-z]{2,10}$/.test(inputEnvName);
    };
    const INVALID_ENV_NAME_MSG = 'Environment name must be between 2 and 10 characters, and lowercase only.';
    if (context.exeInfo.inputParams.amplify && context.exeInfo.inputParams.amplify.envName) {
        if (isEnvNameValid(context.exeInfo.inputParams.amplify.envName)) {
            ({ envName } = context.exeInfo.inputParams.amplify);
            return envName;
        }
        context.print.error(INVALID_ENV_NAME_MSG);
        context.usageData.emitError(new amplify_cli_core_1.InvalidEnvironmentNameError(INVALID_ENV_NAME_MSG));
        amplify_cli_core_1.exitOnNextTick(1);
    }
    else if (context.exeInfo.inputParams && context.exeInfo.inputParams.yes) {
        context.print.error('Environment name missing');
        context.usageData.emitError(new amplify_cli_core_1.InvalidEnvironmentNameError(INVALID_ENV_NAME_MSG));
        amplify_cli_core_1.exitOnNextTick(1);
    }
    const newEnvQuestion = async () => {
        let defaultEnvName;
        if (isNewProject(context) || !context.amplify.getAllEnvs().includes('dev')) {
            defaultEnvName = 'dev';
        }
        const envNameQuestion = {
            type: 'input',
            name: 'envName',
            message: 'Enter a name for the environment',
            default: defaultEnvName,
            validate: input => (!isEnvNameValid(input) ? INVALID_ENV_NAME_MSG : true),
        };
        ({ envName } = await inquirer.prompt(envNameQuestion));
    };
    if (isNewProject(context)) {
        await newEnvQuestion();
    }
    else {
        const allEnvs = context.amplify.getAllEnvs();
        if (allEnvs.length > 0) {
            if (await context.amplify.confirmPrompt('Do you want to use an existing environment?')) {
                const envQuestion = {
                    type: 'list',
                    name: 'envName',
                    message: 'Choose the environment you would like to use:',
                    choices: allEnvs,
                };
                ({ envName } = await inquirer.prompt(envQuestion));
            }
            else {
                await newEnvQuestion();
            }
        }
        else {
            await newEnvQuestion();
        }
    }
    return envName;
}
function isNewEnv(envName) {
    let newEnv = true;
    const projectPath = process.cwd();
    const teamProviderInfo = amplify_cli_core_1.stateManager.getTeamProviderInfo(projectPath, {
        throwIfNotExist: false,
        default: {},
    });
    if (teamProviderInfo[envName]) {
        newEnv = false;
    }
    return newEnv;
}
function isNewProject(context) {
    let newProject = true;
    const projectPath = process.cwd();
    const projectConfigFilePath = context.amplify.pathManager.getProjectConfigFilePath(projectPath);
    if (fs.existsSync(projectConfigFilePath)) {
        newProject = false;
    }
    return newProject;
}
function getDefaultEditor() {
    const projectPath = process.cwd();
    const localEnvInfo = amplify_cli_core_1.stateManager.getLocalEnvInfo(projectPath, {
        throwIfNotExist: false,
        default: {},
    });
    return localEnvInfo.defaultEditor;
}
//# sourceMappingURL=s0-analyzeProject.js.map