"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pullBackend = void 0;
const fs = __importStar(require("fs-extra"));
const initialize_env_1 = require("./initialize-env");
const amplify_service_helper_1 = require("./amplify-service-helper");
const amplify_cli_core_1 = require("amplify-cli-core");
async function pullBackend(context, inputParams) {
    context.exeInfo = context.amplify.getProjectDetails();
    context.exeInfo.inputParams = inputParams;
    context.print.info('');
    context.print.info('Pre-pull status:');
    const hasChanges = await context.amplify.showResourceTable();
    context.print.info('');
    context.exeInfo.forcePush = false;
    context.exeInfo.restoreBackend = !context.exeInfo.inputParams.amplify.noOverride;
    if (hasChanges && context.exeInfo.restoreBackend) {
        context.print.warning('Local changes detected.');
        context.print.warning('Pulling changes from the cloud will override your local changes.');
        if (!context.exeInfo.inputParams.yes) {
            const confirmOverride = await context.amplify.confirmPrompt('Are you sure you would like to continue?', false);
            if (!confirmOverride) {
                context.print.info(`Run an 'amplify push' to update your project upstream.`);
                context.print.info('However, this will override upstream changes to this backend environment with your local changes.');
                context.print.info(`To merge local and upstream changes, commit all backend code changes to Git, perform a merge, resolve conflicts, and then run 'amplify push'.`);
                context.usageData.emitSuccess();
                amplify_cli_core_1.exitOnNextTick(0);
            }
        }
    }
    await initialize_env_1.initializeEnv(context);
    ensureBackendConfigFile(context);
    await amplify_service_helper_1.postPullCodeGenCheck(context);
    context.print.info('Post-pull status:');
    await context.amplify.showResourceTable();
    context.print.info('');
}
exports.pullBackend = pullBackend;
function ensureBackendConfigFile(context) {
    const { projectPath } = context.exeInfo.localEnvInfo;
    const backendConfigFilePath = context.amplify.pathManager.getBackendConfigFilePath(projectPath);
    if (!fs.existsSync(backendConfigFilePath)) {
        fs.writeFileSync(backendConfigFilePath, '{}', 'utf8');
    }
}
//# sourceMappingURL=pull-backend.js.map