"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeResourceParameters = exports.loadEnvResourceParameters = exports.saveEnvResourceParameters = void 0;
const lodash_1 = __importDefault(require("lodash"));
const get_env_info_1 = require("./get-env-info");
const amplify_cli_core_1 = require("amplify-cli-core");
const CATEGORIES = 'categories';
function isMigrationContext(context) {
    return 'migrationInfo' in context;
}
function getCurrentEnvName(context) {
    if (isMigrationContext(context)) {
        return context.migrationInfo.localEnvInfo.envName;
    }
    return get_env_info_1.getEnvInfo().envName;
}
function loadAllResourceParameters(context) {
    try {
        if (isMigrationContext(context)) {
            return context.migrationInfo.teamProviderInfo;
        }
        return amplify_cli_core_1.stateManager.getTeamProviderInfo(undefined, {
            throwIfNotExist: false,
            default: {},
        });
    }
    catch (e) {
        return {};
    }
}
function getOrCreateSubObject(data, keys) {
    let currentObj = data;
    keys.forEach(key => {
        if (!(key in currentObj)) {
            currentObj[key] = {};
        }
        currentObj = currentObj[key];
    });
    return currentObj;
}
function removeObjectRecursively(obj, keys) {
    if (keys.length > 1) {
        const [currentKey, ...rest] = keys;
        if (currentKey in obj) {
            removeObjectRecursively(obj[currentKey], rest);
            if (!Object.keys(obj[currentKey]).length) {
                delete obj[currentKey];
            }
        }
    }
    else {
        const [currentKey] = keys;
        if (currentKey in obj) {
            delete obj[currentKey];
        }
    }
}
function saveAllResourceParams(context, data) {
    if (isMigrationContext(context))
        return;
    amplify_cli_core_1.stateManager.setTeamProviderInfo(undefined, data);
}
function saveEnvResourceParameters(context, category, resource, parameters) {
    const allParams = loadAllResourceParameters(context);
    const currentEnv = getCurrentEnvName(context);
    const resources = getOrCreateSubObject(allParams, [currentEnv, CATEGORIES, category]);
    resources[resource] = lodash_1.default.assign(resources[resource], parameters);
    saveAllResourceParams(context, allParams);
}
exports.saveEnvResourceParameters = saveEnvResourceParameters;
function loadEnvResourceParameters(context, category, resource) {
    const allParams = loadAllResourceParameters(context);
    try {
        const currentEnv = getCurrentEnvName(context);
        return getOrCreateSubObject(allParams, [currentEnv, CATEGORIES, category, resource]);
    }
    catch (e) {
        return {};
    }
}
exports.loadEnvResourceParameters = loadEnvResourceParameters;
function removeResourceParameters(context, category, resource) {
    const allParams = loadAllResourceParameters(context);
    const currentEnv = getCurrentEnvName(context);
    removeObjectRecursively(allParams, [currentEnv, CATEGORIES, category, resource]);
    saveAllResourceParams(context, allParams);
}
exports.removeResourceParameters = removeResourceParameters;
//# sourceMappingURL=envResourceParams.js.map