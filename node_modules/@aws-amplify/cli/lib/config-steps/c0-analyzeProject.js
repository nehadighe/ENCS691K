"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.analyzeProject = void 0;
const path = __importStar(require("path"));
const inquirer_1 = __importDefault(require("inquirer"));
const editor_selection_1 = require("../extensions/amplify-helpers/editor-selection");
const project_name_validation_1 = require("../extensions/amplify-helpers/project-name-validation");
const get_env_info_1 = require("../extensions/amplify-helpers/get-env-info");
const amplify_cli_core_1 = require("amplify-cli-core");
async function analyzeProject(context) {
    context.exeInfo.projectConfig = amplify_cli_core_1.stateManager.getProjectConfig(undefined, {
        throwIfNotExist: false,
    });
    context.exeInfo.localEnvInfo = get_env_info_1.getEnvInfo();
    const projectPath = process.cwd();
    Object.assign(context.exeInfo.localEnvInfo, { projectPath });
    await configureProjectName(context);
    await configureEditor(context);
    return context;
}
exports.analyzeProject = analyzeProject;
async function configureProjectName(context) {
    let { projectName } = context.exeInfo.projectConfig;
    if (context.exeInfo.inputParams.amplify && context.exeInfo.inputParams.amplify.projectName) {
        projectName = project_name_validation_1.normalizeProjectName(context.exeInfo.inputParams.amplify.projectName);
    }
    else {
        if (!projectName) {
            const projectPath = process.cwd();
            projectName = project_name_validation_1.normalizeProjectName(path.basename(projectPath));
        }
        if (!context.exeInfo.inputParams.yes) {
            const projectNameQuestion = {
                type: 'input',
                name: 'inputProjectName',
                message: 'Enter a name for the project',
                default: projectName,
                validate: input => project_name_validation_1.isProjectNameValid(input) || 'Project name should be between 3 and 20 characters and alphanumeric',
            };
            const answer = await inquirer_1.default.prompt(projectNameQuestion);
            projectName = answer.inputProjectName;
        }
    }
    Object.assign(context.exeInfo.projectConfig, { projectName });
}
async function configureEditor(context) {
    let { defaultEditor } = context.exeInfo.localEnvInfo;
    if (context.exeInfo.inputParams.amplify && context.exeInfo.inputParams.amplify.defaultEditor) {
        defaultEditor = editor_selection_1.normalizeEditor(context.exeInfo.inputParams.amplify.editor);
    }
    else if (!context.exeInfo.inputParams.yes) {
        defaultEditor = await editor_selection_1.editorSelection(defaultEditor);
    }
    Object.assign(context.exeInfo.localEnvInfo, { defaultEditor });
}
//# sourceMappingURL=c0-analyzeProject.js.map