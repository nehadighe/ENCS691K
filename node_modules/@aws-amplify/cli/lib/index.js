"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeAmplifyCommand = exports.execute = exports.run = void 0;
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const amplify_cli_core_1 = require("amplify-cli-core");
const plugin_manager_1 = require("./plugin-manager");
const input_manager_1 = require("./input-manager");
const context_manager_1 = require("./context-manager");
const context_extensions_1 = require("./context-extensions");
const execution_manager_1 = require("./execution-manager");
const constants_1 = require("./domain/constants");
const project_config_version_check_1 = require("./project-config-version-check");
const version_notifier_1 = require("./version-notifier");
const events_1 = require("events");
const rewireDeprecatedCommands_1 = require("./rewireDeprecatedCommands");
const mobilehub_support_1 = require("./utils/mobilehub-support");
events_1.EventEmitter.defaultMaxListeners = 1000;
async function run() {
    var _a;
    let errorHandler = (e) => { };
    try {
        let pluginPlatform = await plugin_manager_1.getPluginPlatform();
        let input = input_manager_1.getCommandLineInput(pluginPlatform);
        if (input.command !== 'help') {
            version_notifier_1.notify({ defer: false, isGlobal: true });
        }
        ensureFilePermissions(amplify_cli_core_1.pathManager.getAWSCredentialsFilePath());
        ensureFilePermissions(amplify_cli_core_1.pathManager.getAWSConfigFilePath());
        let verificationResult = input_manager_1.verifyInput(pluginPlatform, input);
        if (!verificationResult.verified) {
            if (verificationResult.message) {
                context_extensions_1.print.warning(verificationResult.message);
            }
            pluginPlatform = await plugin_manager_1.scan();
            input = input_manager_1.getCommandLineInput(pluginPlatform);
            verificationResult = input_manager_1.verifyInput(pluginPlatform, input);
        }
        if (!verificationResult.verified) {
            if (verificationResult.helpCommandAvailable) {
                input.command = constants_1.constants.HELP;
            }
            else {
                throw new Error(verificationResult.message);
            }
        }
        rewireDeprecatedCommands_1.rewireDeprecatedCommands(input);
        const context = context_manager_1.constructContext(pluginPlatform, input);
        const contextEnvironmentProvider = new amplify_cli_core_1.CLIContextEnvironmentProvider({
            getEnvInfo: context.amplify.getEnvInfo,
        });
        const projectPath = (_a = amplify_cli_core_1.pathManager.findProjectRoot()) !== null && _a !== void 0 ? _a : process.cwd();
        const useNewDefaults = !amplify_cli_core_1.stateManager.projectConfigExists(projectPath);
        await amplify_cli_core_1.FeatureFlags.initialize(contextEnvironmentProvider, useNewDefaults);
        await context_manager_1.attachUsageData(context);
        errorHandler = boundErrorHandler.bind(context);
        process.on('SIGINT', sigIntHandler.bind(context));
        await project_config_version_check_1.checkProjectConfigVersion(context);
        context.usageData.emitInvoke();
        if (!mobilehub_support_1.ensureMobileHubCommandCompatibility(context)) {
            return 1;
        }
        await execution_manager_1.executeCommand(context);
        const exitCode = process.exitCode || 0;
        if (exitCode === 0) {
            context.usageData.emitSuccess();
        }
        context_manager_1.persistContext(context);
        if (input.command === 'help') {
            version_notifier_1.notify({ defer: true, isGlobal: true });
        }
        return exitCode;
    }
    catch (e) {
        errorHandler(e);
        if (e.message) {
            context_extensions_1.print.error(e.message);
        }
        if (e.stack) {
            context_extensions_1.print.info(e.stack);
        }
        amplify_cli_core_1.exitOnNextTick(1);
    }
}
exports.run = run;
function ensureFilePermissions(filePath) {
    if (fs.existsSync(filePath) && (fs.statSync(filePath).mode & 0o777) === 0o644) {
        fs.chmodSync(filePath, '600');
    }
}
function boundErrorHandler(e) {
    this.usageData.emitError(e);
}
function sigIntHandler(e) {
    this.usageData.emitAbort();
    this.print.warn('^Aborted!');
    amplify_cli_core_1.exitOnNextTick(2);
}
async function execute(input) {
    let errorHandler = (e) => { };
    try {
        let pluginPlatform = await plugin_manager_1.getPluginPlatform();
        let verificationResult = input_manager_1.verifyInput(pluginPlatform, input);
        if (!verificationResult.verified) {
            if (verificationResult.message) {
                context_extensions_1.print.warning(verificationResult.message);
            }
            pluginPlatform = await plugin_manager_1.scan();
            verificationResult = input_manager_1.verifyInput(pluginPlatform, input);
        }
        if (!verificationResult.verified) {
            if (verificationResult.helpCommandAvailable) {
                input.command = constants_1.constants.HELP;
            }
            else {
                throw new Error(verificationResult.message);
            }
        }
        const context = await context_manager_1.constructContext(pluginPlatform, input);
        await context_manager_1.attachUsageData(context);
        errorHandler = boundErrorHandler.bind(context);
        process.on('SIGINT', sigIntHandler.bind(context));
        context.usageData.emitInvoke();
        await execution_manager_1.executeCommand(context);
        const exitCode = process.exitCode || 0;
        if (exitCode === 0) {
            context.usageData.emitSuccess();
        }
        context_manager_1.persistContext(context);
        return exitCode;
    }
    catch (e) {
        errorHandler(e);
        if (e.message) {
            context_extensions_1.print.error(e.message);
        }
        if (e.stack) {
            context_extensions_1.print.info(e.stack);
        }
        return 1;
    }
}
exports.execute = execute;
async function executeAmplifyCommand(context) {
    if (context.input.command) {
        const commandPath = path.normalize(path.join(__dirname, 'commands', context.input.command));
        const commandModule = await Promise.resolve().then(() => __importStar(require(commandPath)));
        await commandModule.run(context);
    }
}
exports.executeAmplifyCommand = executeAmplifyCommand;
//# sourceMappingURL=index.js.map