declare const _exports: {
    executeAmplifyCommand: (context: any) => Promise<void>;
    handleAmplifyEvent: (context: any, args: any) => Promise<void>;
    console: typeof console;
    attachBackend: typeof attachBackend;
    init: typeof init;
    initEnv: typeof initEnv;
    onInitSuccessful: typeof onInitSuccessful;
    configure: typeof configure;
    configureNewUser: typeof configureNewUser;
    constants: {
        ProviderName: string;
        Label: string;
        AmplifyAppIdLabel: string;
        CacheFileName: string;
        S3BackendZipFileName: string;
        LocalAWSInfoFileName: string;
        Aliases: string[];
        DefaultAWSAccessKeyId: string;
        DefaultAWSSecretAccessKey: string;
        DefaultAWSRegion: string;
        AWSAmazonConsoleUrl: string;
        AWSCreateIAMUsersUrl: string;
    };
    pushResources: typeof pushResources;
    storeCurrentCloudBackend: typeof storeCurrentCloudBackend;
    buildResources: typeof buildResources;
    providerUtils: {
        compileSchema: (context: any, options: any) => Promise<any>;
        getTransformerDirectives: (context: any, options: any) => Promise<string>;
        getRegions: () => string[];
        getRegionMappings: () => {
            'us-east-1': string;
            'us-east-2': string;
            'us-west-2': string;
            'eu-west-1': string;
            'eu-west-2': string;
            'eu-central-1': string;
            'ap-northeast-1': string;
            'ap-northeast-2': string;
            'ap-southeast-1': string;
            'ap-southeast-2': string;
            'ap-south-1': string;
            'ca-central-1': string;
        };
        staticRoles: (context: any) => {
            unAuthRoleName: any;
            authRoleName: any;
            unAuthRoleArn: any;
            authRoleArn: any;
        };
        getUserPools: (context: any, options: any) => any;
        getLambdaFunctions: (context: any) => Promise<any[]>;
        getPollyVoices: (context: any) => Promise<any>;
        getDynamoDBTables: (context: any) => Promise<{
            Name: any;
            Arn: any;
            Region: any;
            KeySchema: any;
            AttributeDefinitions: any;
        }[]>;
        getAppSyncAPIs: (context: any) => any;
        getIntrospectionSchema: (context: any, options: any) => any;
        getGraphQLApiDetails: (context: any, options: any) => any;
        getBuiltInSlotTypes: (context: any, options: any) => any;
        getSlotTypes: (context: any) => any;
        getAppSyncApiKeys: (context: any, options: any) => any;
        getEndpoints: (context: any) => Promise<any>;
    };
    setupNewUser: {
        run: (context: any) => Promise<string>;
    };
    getConfiguredAWSClient: typeof getConfiguredAWSClient;
    getPinpointRegionMapping: typeof getPinpointRegionMapping;
    getLexRegionMapping: () => {
        'us-east-1': string;
        'us-east-2': string;
        'sa-east-1': string;
        'ca-central-1': string;
        'us-west-1': string;
        'us-west-2': string;
        'cn-north-1': string;
        'cn-northwest-1': string;
        'ap-south-1': string;
        'ap-northeast-3': string;
        'ap-northeast-2': string;
        'ap-southeast-1': string;
        'ap-southeast-2': string;
        'ap-northeast-1': string;
        'eu-central-1': string;
        'eu-west-1': string;
        'eu-west-2': string;
        'eu-west-3': string;
    };
    getConfiguredPinpointClient: typeof getConfiguredPinpointClient;
    getConfiguredAmplifyClient: typeof getConfiguredAmplifyClient;
    showHelpfulLinks: typeof showHelpfulLinks;
    deleteEnv: typeof deleteEnv;
    loadResourceParameters: (context: any, category: any, resource: any) => any;
    saveResourceParameters: (context: any, category: any, resource: any, parameters: any, envSpecificParamsName?: any[]) => any;
    predictionsRegionMap: {
        Translate: {
            'us-east-1': string;
            'us-east-2': string;
            'us-west-2': string;
            'ca-central-1': string;
            'eu-west-1': string;
            'eu-west-2': string;
            'eu-central-1': string;
            'ap-northeast-1': string;
            'ap-northeast-2': string;
            'ap-southeast-1': string;
            'ap-southeast-2': string;
            'ap-south-1': string;
        };
        Polly: {
            'us-east-1': string;
            'us-east-2': string;
            'us-west-2': string;
            'ca-central-1': string;
            'eu-west-1': string;
            'eu-west-2': string;
            'eu-central-1': string;
            'ap-northeast-1': string;
            'ap-northeast-2': string;
            'ap-southeast-1': string;
            'ap-southeast-2': string;
            'ap-south-1': string;
        };
        Transcribe: {
            'us-east-1': string;
            'us-east-2': string;
            'us-west-2': string;
            'ca-central-1': string;
            'eu-west-1': string;
            'eu-west-2': string;
            'eu-central-1': string;
            'ap-northeast-1': string;
            'ap-northeast-2': string;
            'ap-southeast-1': string;
            'ap-southeast-2': string;
            'ap-south-1': string;
        };
        Rekognition: {
            'us-east-1': string;
            'us-east-2': string;
            'us-west-2': string;
            'ca-central-1': string;
            'eu-west-1': string;
            'eu-west-2': string;
            'eu-central-1': string;
            'ap-northeast-1': string;
            'ap-northeast-2': string;
            'ap-southeast-1': string;
            'ap-southeast-2': string;
            'ap-south-1': string;
        };
        RekognitionAndTextract: {
            'us-east-1': string;
            'us-east-2': string;
            'us-west-2': string;
            'ca-central-1': string;
            'eu-west-1': string;
            'eu-west-2': string;
            'eu-central-1': string;
            'ap-northeast-1': string;
            'ap-northeast-2': string;
            'ap-southeast-1': string;
            'ap-southeast-2': string;
            'ap-south-1': string;
        };
        Comprehend: {
            'us-east-1': string;
            'us-east-2': string;
            'us-west-2': string;
            'ca-central-1': string;
            'eu-west-1': string;
            'eu-west-2': string;
            'eu-central-1': string;
            'ap-northeast-1': string;
            'ap-northeast-2': string;
            'ap-southeast-1': string;
            'ap-southeast-2': string;
            'ap-south-1': string;
        };
        SageMaker: {
            'us-east-1': string;
            'us-east-2': string;
            'us-west-2': string;
            'ca-central-1': string;
            'eu-west-1': string;
            'eu-west-2': string;
            'eu-central-1': string;
            'ap-northeast-1': string;
            'ap-northeast-2': string;
            'ap-southeast-1': string;
            'ap-southeast-2': string;
            'ap-south-1': string;
        };
    };
};
export = _exports;
declare function console(context: any): void;
declare function attachBackend(context: any): Promise<void>;
declare function init(context: any): Promise<any>;
declare function initEnv(context: any, providerMetadata: any): Promise<any>;
declare function onInitSuccessful(context: any): Promise<any>;
declare function configure(context: any): Promise<any>;
declare function configureNewUser(context: any): Promise<string>;
declare function pushResources(context: any, resourceList: any): Promise<void>;
declare function storeCurrentCloudBackend(context: any): Promise<void>;
declare function buildResources(context: any, category: any, resourceName: any): any;
declare function getConfiguredAWSClient(context: any, category: any, action: any): Promise<any>;
declare function getPinpointRegionMapping(): {
    'us-east-1': string;
    'us-east-2': string;
    'sa-east-1': string;
    'ca-central-1': string;
    'us-west-1': string;
    'us-west-2': string;
    'cn-north-1': string;
    'cn-northwest-1': string;
    'ap-south-1': string;
    'ap-northeast-3': string;
    'ap-northeast-2': string;
    'ap-southeast-1': string;
    'ap-southeast-2': string;
    'ap-northeast-1': string;
    'eu-central-1': string;
    'eu-west-1': string;
    'eu-west-2': string;
    'eu-west-3': string;
};
declare function getConfiguredPinpointClient(context: any, category: any, action: any, envName: any): Promise<AWS.Pinpoint>;
declare function getConfiguredAmplifyClient(context: any, category: any, action: any, options?: {}): Promise<AWS.Amplify>;
declare function showHelpfulLinks(context: any, resources: any): Promise<void>;
declare function deleteEnv(context: any, envName: any, deleteS3: any): Promise<void>;
//# sourceMappingURL=index.d.ts.map