const fs = require('fs-extra');
const path = require('path');
const glob = require('glob');
const _ = require('lodash');
const { JSONUtilities, PathConstants, stateManager } = require('amplify-cli-core');
const Cloudformation = require('./aws-utils/aws-cfn');
const { S3 } = require('./aws-utils/aws-s3');
const { downloadZip, extractZip } = require('./zip-util');
const { S3BackendZipFileName } = require('./constants');
async function run(context, providerMetadata) {
    if (context.exeInfo && context.exeInfo.isNewEnv) {
        return context;
    }
    const amplifyDir = context.amplify.pathManager.getAmplifyDirPath();
    const tempDir = path.join(amplifyDir, '.temp');
    const currentCloudBackendDir = context.amplify.pathManager.getCurrentCloudBackendDirPath();
    const backendDir = context.amplify.pathManager.getBackendDirPath();
    const s3 = await S3.getInstance(context);
    const file = await downloadZip(s3, tempDir, S3BackendZipFileName);
    const unzippeddir = await extractZip(tempDir, file);
    fs.removeSync(currentCloudBackendDir);
    const cliJSONFiles = glob.sync(PathConstants.CLIJSONFileNameGlob, {
        cwd: unzippeddir,
        absolute: true,
    });
    if (context.exeInfo.restoreBackend) {
        for (const cliJSONFilePath of cliJSONFiles) {
            const targetPath = path.join(amplifyDir, path.basename(cliJSONFilePath));
            fs.moveSync(cliJSONFilePath, targetPath, { overwrite: true });
        }
    }
    else {
        for (const cliJSONFilePath of cliJSONFiles) {
            fs.removeSync(cliJSONFilePath);
        }
    }
    fs.copySync(unzippeddir, currentCloudBackendDir);
    if (context.exeInfo.restoreBackend) {
        fs.removeSync(backendDir);
        fs.copySync(unzippeddir, backendDir);
    }
    fs.removeSync(tempDir);
    const cfnItem = await new Cloudformation(context);
    await cfnItem.updateamplifyMetaFileWithStackOutputs(providerMetadata.StackName);
    const currentAmplifyMeta = stateManager.getCurrentMeta();
    const amplifyMeta = stateManager.getMeta();
    Object.keys(amplifyMeta).forEach(category => {
        Object.keys(amplifyMeta[category]).forEach(resource => {
            if (currentAmplifyMeta[category] && currentAmplifyMeta[category][resource]) {
                amplifyMeta[category][resource].providerMetadata = currentAmplifyMeta[category][resource].providerMetadata;
            }
        });
    });
    let hasMigratedResources = false;
    const s3AmplifyMeta = JSONUtilities.parse((await s3.getFile({
        Key: PathConstants.AmplifyMetaFileName,
    })).toString());
    Object.keys(s3AmplifyMeta)
        .filter(k => k !== 'providers')
        .forEach(category => {
        Object.keys(s3AmplifyMeta[category]).forEach(resourceName => {
            const resource = s3AmplifyMeta[category][resourceName];
            if (!resource.providerPlugin) {
                _.set(amplifyMeta, [category, resourceName], resource);
                hasMigratedResources = true;
            }
        });
    });
    stateManager.setMeta(undefined, amplifyMeta);
    if (hasMigratedResources) {
        stateManager.setCurrentMeta(undefined, amplifyMeta);
    }
}
module.exports = {
    run,
};
//# sourceMappingURL=initialize-env.js.map