const fs = require('fs-extra');
const path = require('path');
const chalk = require('chalk');
const inquirer = require('inquirer');
const importGlobal = require('import-global');
const importFrom = require('import-from');
const { DynamoDBModelTransformer } = require('graphql-dynamodb-transformer');
const { ModelAuthTransformer } = require('graphql-auth-transformer');
const { ModelConnectionTransformer } = require('graphql-connection-transformer');
const { SearchableModelTransformer } = require('graphql-elasticsearch-transformer');
const { VersionedModelTransformer } = require('graphql-versioned-transformer');
const { FunctionTransformer } = require('graphql-function-transformer');
const { HttpTransformer } = require('graphql-http-transformer');
const { PredictionsTransformer } = require('graphql-predictions-transformer');
const { KeyTransformer } = require('graphql-key-transformer');
const providerName = require('./constants').ProviderName;
const TransformPackage = require('graphql-transformer-core');
const { print } = require('graphql');
const { hashDirectory } = require('./upload-appsync-files');
const { exitOnNextTick } = require('amplify-cli-core');
const { collectDirectivesByTypeNames, readTransformerConfiguration, writeTransformerConfiguration, TRANSFORM_CONFIG_FILE_NAME, TRANSFORM_BASE_VERSION, CLOUDFORMATION_FILE_NAME, getAppSyncServiceExtraDirectives, } = TransformPackage;
const apiCategory = 'api';
const storageCategory = 'storage';
const parametersFileName = 'parameters.json';
const schemaFileName = 'schema.graphql';
const schemaDirName = 'schema';
const ROOT_APPSYNC_S3_KEY = 'amplify-appsync-files';
const s3ServiceName = 'S3';
function warnOnAuth(context, map) {
    const unAuthModelTypes = Object.keys(map).filter(type => !map[type].includes('auth') && map[type].includes('model'));
    if (unAuthModelTypes.length) {
        context.print.warning("\nThe following types do not have '@auth' enabled. Consider using @auth with @model");
        context.print.warning(unAuthModelTypes.map(type => `\t - ${type}`).join('\n'));
        context.print.info('Learn more about @auth here: https://docs.amplify.aws/cli/graphql-transformer/directives#auth\n');
    }
}
function getTransformerFactory(context, resourceDir, authConfig) {
    return async (addSearchableTransformer, storageConfig) => {
        const transformerList = [
            new DynamoDBModelTransformer(),
            new VersionedModelTransformer(),
            new FunctionTransformer(),
            new HttpTransformer(),
            new KeyTransformer(),
            new ModelConnectionTransformer(),
            new PredictionsTransformer(storageConfig),
        ];
        if (addSearchableTransformer) {
            transformerList.push(new SearchableModelTransformer());
        }
        const customTransformersConfig = await readTransformerConfiguration(resourceDir);
        const customTransformers = (customTransformersConfig && customTransformersConfig.transformers
            ? customTransformersConfig.transformers
            : [])
            .map(transformer => {
            const fileUrlMatch = /^file:\/\/(.*)\s*$/m.exec(transformer);
            const modulePath = fileUrlMatch ? fileUrlMatch[1] : transformer;
            if (!modulePath) {
                throw new Error(`Invalid value specified for transformer: '${transformer}'`);
            }
            let importedModule;
            const tempModulePath = modulePath.toString();
            try {
                if (path.isAbsolute(tempModulePath)) {
                    importedModule = require(modulePath);
                }
                else {
                    const projectRootPath = context.amplify.pathManager.searchProjectRootPath();
                    const projectNodeModules = path.join(projectRootPath, 'node_modules');
                    try {
                        importedModule = importFrom(projectNodeModules, modulePath);
                    }
                    catch (_) {
                    }
                    if (!importedModule) {
                        importedModule = importGlobal(modulePath);
                    }
                }
                return importedModule;
            }
            catch (error) {
                context.print.error(`Unable to import custom transformer module(${modulePath}).`);
                context.print.error(`You may fix this error by editing transformers at ${path.join(resourceDir, TRANSFORM_CONFIG_FILE_NAME)}`);
                throw error;
            }
        })
            .map(imported => {
            const CustomTransformer = imported.default;
            if (typeof CustomTransformer === 'function') {
                return new CustomTransformer();
            }
            else if (typeof CustomTransformer === 'object') {
                return CustomTransformer;
            }
            throw new Error("Custom Transformers' default export must be a function or an object");
        })
            .filter(customTransformer => customTransformer);
        if (customTransformers.length > 0) {
            transformerList.push(...customTransformers);
        }
        transformerList.push(new ModelAuthTransformer({ authConfig }));
        return transformerList;
    };
}
async function transformerVersionCheck(context, resourceDir, cloudBackendDirectory, updatedResources, usedDirectives) {
    const versionChangeMessage = 'The default behavior for @auth has changed in the latest version of Amplify\nRead here for details: https://docs.amplify.aws/cli/graphql-transformer/directives#authorizing-subscriptions';
    const warningESMessage = 'The behavior for @searchable has changed after version 4.14.1.\nRead here for details: https://docs.amplify.aws/cli/graphql-transformer/directives#searchable';
    const checkVersionExist = config => config && config.Version;
    const checkESWarningExists = config => config && config.ElasticsearchWarning;
    let writeToConfig = false;
    const cloudTransformerConfig = await readTransformerConfiguration(cloudBackendDirectory);
    const cloudVersionExist = checkVersionExist(cloudTransformerConfig);
    const cloudWarningExist = checkESWarningExists(cloudTransformerConfig);
    const localTransformerConfig = await readTransformerConfiguration(resourceDir);
    const localVersionExist = checkVersionExist(localTransformerConfig);
    const localWarningExist = checkESWarningExists(localTransformerConfig);
    const showPrompt = !(cloudVersionExist || localVersionExist);
    const showWarning = !(cloudWarningExist || localWarningExist);
    const resources = updatedResources.filter(resource => resource.service === 'AppSync');
    if (resources.length > 0) {
        if (showPrompt && usedDirectives.includes('auth')) {
            await warningMessage(context, versionChangeMessage);
        }
        if (showWarning && usedDirectives.includes('searchable')) {
            await warningMessage(context, warningESMessage);
        }
    }
    if (!localTransformerConfig.Version) {
        localTransformerConfig.Version = TRANSFORM_BASE_VERSION;
        writeToConfig = true;
    }
    if (!localTransformerConfig.warningESMessage) {
        localTransformerConfig.ElasticsearchWarning = true;
        writeToConfig = true;
    }
    if (writeToConfig) {
        await writeTransformerConfiguration(resourceDir, localTransformerConfig);
    }
}
async function warningMessage(context, warningMessage) {
    if (context.exeInfo && context.exeInfo.inputParams && context.exeInfo.inputParams.yes) {
        context.print.warning(`\n${warningMessage}\n`);
    }
    else {
        context.print.warning(`\n${warningMessage}\n`);
        const response = await inquirer.prompt({
            name: 'transformerConfig',
            type: 'confirm',
            message: `Do you wish to continue?`,
            default: false,
        });
        if (!response.transformerConfig) {
            context.usageData.emitSuccess();
            exitOnNextTick(0);
        }
    }
}
function apiProjectIsFromOldVersion(pathToProject, resourcesToBeCreated) {
    const resources = resourcesToBeCreated.filter(resource => resource.service === 'AppSync');
    if (!pathToProject || resources.length > 0) {
        return false;
    }
    return fs.existsSync(`${pathToProject}/${CLOUDFORMATION_FILE_NAME}`) && !fs.existsSync(`${pathToProject}/${TRANSFORM_CONFIG_FILE_NAME}`);
}
async function migrateProject(context, options) {
    const { resourceDir, isCLIMigration, cloudBackendDirectory } = options;
    const updateAndWaitForStack = options.handleMigration || (() => Promise.resolve('Skipping update'));
    let oldProjectConfig;
    let oldCloudBackend;
    try {
        context.print.info('\nMigrating your API. This may take a few minutes.');
        const { project, cloudBackend } = await TransformPackage.migrateAPIProject({
            projectDirectory: resourceDir,
            cloudBackendDirectory,
        });
        oldProjectConfig = project;
        oldCloudBackend = cloudBackend;
        await updateAndWaitForStack({ isCLIMigration });
    }
    catch (e) {
        await TransformPackage.revertAPIMigration(resourceDir, oldProjectConfig);
        throw e;
    }
    try {
        options.cloudBackendDirectory = resourceDir;
        await transformGraphQLSchema(context, options);
        const result = await updateAndWaitForStack({ isCLIMigration });
        context.print.info('\nFinished migrating API.');
        return result;
    }
    catch (e) {
        context.print.error('Reverting API migration.');
        await TransformPackage.revertAPIMigration(resourceDir, oldCloudBackend);
        try {
            await updateAndWaitForStack({ isReverting: true, isCLIMigration });
        }
        catch (e) {
            context.print.error('Error reverting intermediate migration stack.');
        }
        await TransformPackage.revertAPIMigration(resourceDir, oldProjectConfig);
        context.print.error('API successfully reverted.');
        throw e;
    }
}
async function transformGraphQLSchema(context, options) {
    const backEndDir = context.amplify.pathManager.getBackendDirPath();
    const flags = context.parameters.options;
    if (flags['no-gql-override']) {
        return;
    }
    let { resourceDir, parameters } = options;
    const { forceCompile } = options;
    const { resourcesToBeCreated, resourcesToBeUpdated, allResources } = await context.amplify.getResourceStatus(apiCategory);
    let resources = resourcesToBeCreated.concat(resourcesToBeUpdated);
    const resourceNeedCompile = allResources
        .filter(r => !resources.includes(r))
        .filter(r => {
        const buildDir = path.normalize(path.join(backEndDir, apiCategory, r.resourceName, 'build'));
        return !fs.existsSync(buildDir);
    });
    resources = resources.concat(resourceNeedCompile);
    if (forceCompile) {
        resources = resources.concat(allResources);
    }
    resources = resources.filter(resource => resource.service === 'AppSync');
    if (!resourceDir) {
        if (resources.length > 0) {
            const resource = resources[0];
            if (resource.providerPlugin !== providerName) {
                return;
            }
            const { category, resourceName } = resource;
            resourceDir = path.normalize(path.join(backEndDir, category, resourceName));
        }
        else {
            return;
        }
    }
    let previouslyDeployedBackendDir = options.cloudBackendDirectory;
    if (!previouslyDeployedBackendDir) {
        if (resources.length > 0) {
            const resource = resources[0];
            if (resource.providerPlugin !== providerName) {
                return;
            }
            const { category, resourceName } = resource;
            const cloudBackendRootDir = context.amplify.pathManager.getCurrentCloudBackendDirPath();
            previouslyDeployedBackendDir = path.normalize(path.join(cloudBackendRootDir, category, resourceName));
        }
    }
    const parametersFilePath = path.join(resourceDir, parametersFileName);
    if (!parameters && fs.existsSync(parametersFilePath)) {
        try {
            parameters = context.amplify.readJsonFile(parametersFilePath);
        }
        catch (e) {
            parameters = {};
        }
    }
    const isCLIMigration = options.migrate;
    const isOldApiVersion = apiProjectIsFromOldVersion(previouslyDeployedBackendDir, resourcesToBeCreated);
    const migrateOptions = {
        ...options,
        resourceDir,
        migrate: false,
        isCLIMigration,
        cloudBackendDirectory: previouslyDeployedBackendDir,
    };
    if (isCLIMigration && isOldApiVersion) {
        return await migrateProject(context, migrateOptions);
    }
    else if (isOldApiVersion) {
        let IsOldApiProject;
        if (context.exeInfo && context.exeInfo.inputParams && context.exeInfo.inputParams.yes) {
            IsOldApiProject = context.exeInfo.inputParams.yes;
        }
        else {
            const migrateMessage = `${chalk.bold('The CLI is going to take the following actions during the migration step:')}\n` +
                '\n1. If you have a GraphQL API, we will update the corresponding Cloudformation stack to support larger annotated schemas and custom resolvers.\n' +
                'In this process, we will be making Cloudformation API calls to update your GraphQL API Cloudformation stack. This operation will result in deletion of your AppSync resolvers and then the creation of new ones and for a brief while your AppSync API will be unavailable until the migration finishes\n' +
                '\n2. We will be updating your local Cloudformation files present inside the ‘amplify/‘ directory of your app project, for the GraphQL API service\n' +
                '\n3. If for any reason the migration fails, the CLI will rollback your cloud and local changes and you can take a look at https://aws-amplify.github.io/docs/cli/migrate?sdk=js for manually migrating your project so that it’s compatible with the latest version of the CLI\n' +
                '\n4. ALL THE ABOVE MENTIONED OPERATIONS WILL NOT DELETE ANY DATA FROM ANY OF YOUR DATA STORES\n' +
                `\n${chalk.bold('Before the migration, please be aware of the following things:')}\n` +
                '\n1. Make sure to have an internet connection through the migration process\n' +
                '\n2. Make sure to not exit/terminate the migration process (by interrupting it explicitly in the middle of migration), as this will lead to inconsistency within your project\n' +
                '\n3. Make sure to take a backup of your entire project (including the amplify related config files)\n' +
                '\nDo you want to continue?\n';
            ({ IsOldApiProject } = await inquirer.prompt({
                name: 'IsOldApiProject',
                type: 'confirm',
                message: migrateMessage,
                default: true,
            }));
        }
        if (!IsOldApiProject) {
            throw new Error('Migration cancelled. Please downgrade to a older version of the Amplify CLI or migrate your API project.');
        }
        return await migrateProject(context, migrateOptions);
    }
    let { authConfig } = options;
    if (!authConfig) {
        if (resources[0].output.securityType) {
            authConfig = {
                defaultAuthentication: {
                    authenticationType: resources[0].output.securityType,
                },
                additionalAuthenticationProviders: [],
            };
        }
        else {
            ({ authConfig } = resources[0].output);
        }
    }
    const s3Resource = s3ResourceAlreadyExists(context);
    const storageConfig = s3Resource ? getBucketName(context, s3Resource, backEndDir) : undefined;
    const buildDir = path.normalize(path.join(resourceDir, 'build'));
    const schemaFilePath = path.normalize(path.join(resourceDir, schemaFileName));
    const schemaDirPath = path.normalize(path.join(resourceDir, schemaDirName));
    let deploymentRootKey = await getPreviousDeploymentRootKey(previouslyDeployedBackendDir);
    if (!deploymentRootKey) {
        const deploymentSubKey = await hashDirectory(resourceDir);
        deploymentRootKey = `${ROOT_APPSYNC_S3_KEY}/${deploymentSubKey}`;
    }
    const projectBucket = options.dryRun ? 'fake-bucket' : getProjectBucket(context);
    const buildParameters = {
        ...parameters,
        S3DeploymentBucket: projectBucket,
        S3DeploymentRootKey: deploymentRootKey,
    };
    fs.ensureDirSync(buildDir);
    const project = await TransformPackage.readProjectConfiguration(resourceDir);
    const directiveMap = collectDirectivesByTypeNames(project.schema);
    warnOnAuth(context, directiveMap.types);
    await transformerVersionCheck(context, resourceDir, previouslyDeployedBackendDir, resourcesToBeUpdated, directiveMap.directives);
    const transformerListFactory = getTransformerFactory(context, resourceDir, authConfig);
    let searchableTransformerFlag = false;
    if (directiveMap.directives.includes('searchable')) {
        searchableTransformerFlag = true;
    }
    const buildConfig = {
        ...options,
        buildParameters,
        projectDirectory: options.dryrun ? false : resourceDir,
        transformersFactory: transformerListFactory,
        transformersFactoryArgs: [searchableTransformerFlag, storageConfig],
        rootStackFileName: 'cloudformation-template.json',
        currentCloudBackendDirectory: previouslyDeployedBackendDir,
        minify: options.minify,
    };
    const transformerOutput = await TransformPackage.buildAPIProject(buildConfig);
    context.print.success(`\nGraphQL schema compiled successfully.\n\nEdit your schema at ${schemaFilePath} or \
place .graphql files in a directory at ${schemaDirPath}`);
    const jsonString = JSON.stringify(parameters, null, 4);
    if (!options.dryRun) {
        fs.writeFileSync(parametersFilePath, jsonString, 'utf8');
    }
    return transformerOutput;
}
function getProjectBucket(context) {
    const projectDetails = context.amplify.getProjectDetails();
    const projectBucket = projectDetails.amplifyMeta.providers ? projectDetails.amplifyMeta.providers[providerName].DeploymentBucketName : '';
    return projectBucket;
}
async function getPreviousDeploymentRootKey(previouslyDeployedBackendDir) {
    let parameters;
    try {
        const parametersPath = path.join(previouslyDeployedBackendDir, `build/${parametersFileName}`);
        const parametersExists = await fs.exists(parametersPath);
        if (parametersExists) {
            const parametersString = await fs.readFile(parametersPath);
            parameters = JSON.parse(parametersString.toString());
        }
        return parameters.S3DeploymentRootKey;
    }
    catch (err) {
        return undefined;
    }
}
async function getDirectiveDefinitions(context, resourceDir) {
    const transformList = await getTransformerFactory(context, resourceDir)(true);
    const appSynDirectives = getAppSyncServiceExtraDirectives();
    const transformDirectives = transformList
        .map(transformPluginInst => [transformPluginInst.directive, ...transformPluginInst.typeDefinitions].map(node => print(node)).join('\n'))
        .join('\n');
    return [appSynDirectives, transformDirectives].join('\n');
}
function s3ResourceAlreadyExists(context) {
    const { amplify } = context;
    try {
        let resourceName;
        const { amplifyMeta } = amplify.getProjectDetails();
        if (amplifyMeta[storageCategory]) {
            const categoryResources = amplifyMeta[storageCategory];
            Object.keys(categoryResources).forEach(resource => {
                if (categoryResources[resource].service === s3ServiceName) {
                    resourceName = resource;
                }
            });
        }
        return resourceName;
    }
    catch (error) {
        if (error.name === 'UndeterminedEnvironmentError') {
            return undefined;
        }
        throw error;
    }
}
function getBucketName(context, s3ResourceName, backEndDir) {
    const { amplify } = context;
    const { amplifyMeta } = amplify.getProjectDetails();
    const stackName = amplifyMeta.providers.awscloudformation.StackName;
    const parametersFilePath = path.join(backEndDir, storageCategory, s3ResourceName, parametersFileName);
    const bucketParameters = context.amplify.readJsonFile(parametersFilePath);
    const bucketName = stackName.startsWith('amplify-')
        ? `${bucketParameters.bucketName}\${hash}-\${env}`
        : `${bucketParameters.bucketName}${s3ResourceName}-\${env}`;
    return { bucketName };
}
module.exports = {
    transformGraphQLSchema,
    getDirectiveDefinitions,
};
//# sourceMappingURL=transform-graphql-schema.js.map