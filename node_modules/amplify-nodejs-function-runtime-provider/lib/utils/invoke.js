"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.invoke = void 0;
const path_1 = __importDefault(require("path"));
const execa = __importStar(require("execa"));
function invoke(options) {
    return new Promise((resolve, reject) => {
        try {
            let data = '';
            const lambdaFn = execa.node(path_1.default.join(__dirname, 'execute.js'), [], {
                env: options.environment || {},
            });
            lambdaFn.stdout.on('data', msg => {
                data += msg;
            });
            lambdaFn.on('close', () => {
                const lines = data.split('\n');
                if (lines.length > 1) {
                    const logs = lines.slice(0, -1).join('\n');
                    console.log(logs);
                }
                const lastLine = lines[lines.length - 1];
                try {
                    const result = JSON.parse(lastLine);
                    if (result.error) {
                        reject(result.error);
                    }
                    resolve(result.result);
                }
                catch (_a) {
                    resolve(lastLine);
                }
            });
            lambdaFn.catch((err) => {
                reject(err.message);
            });
            lambdaFn.send(JSON.stringify(options));
        }
        catch (e) {
            reject(e);
        }
    });
}
exports.invoke = invoke;
//# sourceMappingURL=invoke.js.map