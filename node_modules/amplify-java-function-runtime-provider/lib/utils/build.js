"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildResource = void 0;
const path_1 = __importDefault(require("path"));
const execa = __importStar(require("execa"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const glob_1 = __importDefault(require("glob"));
const constants_1 = require("./constants");
exports.buildResource = async (request) => {
    const resourceDir = path_1.default.join(request.srcRoot);
    const projectPath = path_1.default.join(resourceDir);
    if (!request.lastBuildTimestamp || isBuildStale(request.srcRoot, request.lastBuildTimestamp)) {
        installDependencies(projectPath);
        return { rebuilt: true };
    }
    return { rebuilt: false };
};
const installDependencies = (resourceDir) => {
    runPackageManager(resourceDir, 'build');
    if (!fs_extra_1.default.existsSync(constants_1.shimJarPath)) {
        runPackageManager(constants_1.shimPath, 'jar');
    }
};
const runPackageManager = (cwd, buildArgs) => {
    const packageManager = 'gradle';
    const args = [buildArgs];
    const result = execa.sync(packageManager, args, {
        cwd,
    });
    if (result.exitCode !== 0) {
        throw new Error(`${packageManager} failed, exit code was ${result.exitCode}`);
    }
};
const isBuildStale = (resourceDir, lastBuildTimestamp) => {
    const dirTime = new Date(fs_extra_1.default.statSync(resourceDir).mtime);
    if (dirTime > lastBuildTimestamp) {
        return true;
    }
    const fileUpdatedAfterLastBuild = glob_1.default
        .sync(`${resourceDir}/*/!(build | dist)/**`)
        .find(file => new Date(fs_extra_1.default.statSync(file).mtime) > lastBuildTimestamp);
    return !!fileUpdatedAfterLastBuild;
};
//# sourceMappingURL=build.js.map