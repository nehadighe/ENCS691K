"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stateManager = exports.StateManager = void 0;
const fs = __importStar(require("fs-extra"));
const pathManager_1 = require("./pathManager");
const jsonUtilities_1 = require("../jsonUtilities");
const tags_1 = require("../tags");
class StateManager {
    constructor() {
        this.metaFileExists = (projectPath) => fs.existsSync(pathManager_1.pathManager.getAmplifyMetaFilePath(projectPath));
        this.getMeta = (projectPath, options) => {
            const filePath = pathManager_1.pathManager.getAmplifyMetaFilePath(projectPath);
            const mergedOptions = {
                throwIfNotExist: true,
                ...options,
            };
            const data = this.getData(filePath, mergedOptions);
            return data;
        };
        this.currentMetaFileExists = (projectPath) => fs.existsSync(pathManager_1.pathManager.getCurrentAmplifyMetaFilePath(projectPath));
        this.getCurrentMeta = (projectPath, options) => {
            const filePath = pathManager_1.pathManager.getCurrentAmplifyMetaFilePath(projectPath);
            const mergedOptions = {
                throwIfNotExist: true,
                ...options,
            };
            const data = this.getData(filePath, mergedOptions);
            return data;
        };
        this.getProjectTags = (projectPath) => tags_1.ReadValidateTags(pathManager_1.pathManager.getTagFilePath(projectPath));
        this.getCurrentProjectTags = (projectPath) => tags_1.ReadValidateTags(pathManager_1.pathManager.getCurrentTagFilePath(projectPath));
        this.teamProviderInfoExists = (projectPath) => fs.existsSync(pathManager_1.pathManager.getTeamProviderInfoFilePath(projectPath));
        this.getTeamProviderInfo = (projectPath, options) => {
            const filePath = pathManager_1.pathManager.getTeamProviderInfoFilePath(projectPath);
            const mergedOptions = {
                throwIfNotExist: true,
                ...options,
            };
            return this.getData(filePath, mergedOptions);
        };
        this.localEnvInfoExists = (projectPath) => fs.existsSync(pathManager_1.pathManager.getLocalEnvFilePath(projectPath));
        this.getLocalEnvInfo = (projectPath, options) => {
            const filePath = pathManager_1.pathManager.getLocalEnvFilePath(projectPath);
            const mergedOptions = {
                throwIfNotExist: true,
                ...options,
            };
            return this.getData(filePath, mergedOptions);
        };
        this.getLocalAWSInfo = (projectPath, options) => {
            const filePath = pathManager_1.pathManager.getLocalAWSInfoFilePath(projectPath);
            const mergedOptions = {
                throwIfNotExist: true,
                ...options,
            };
            return this.getData(filePath, mergedOptions);
        };
        this.projectConfigExists = (projectPath) => fs.existsSync(pathManager_1.pathManager.getProjectConfigFilePath(projectPath));
        this.getProjectConfig = (projectPath, options) => {
            const filePath = pathManager_1.pathManager.getProjectConfigFilePath(projectPath);
            const mergedOptions = {
                throwIfNotExist: true,
                ...options,
            };
            return this.getData(filePath, mergedOptions);
        };
        this.backendConfigFileExists = (projectPath) => fs.existsSync(pathManager_1.pathManager.getBackendConfigFilePath(projectPath));
        this.getBackendConfig = (projectPath, options) => {
            const filePath = pathManager_1.pathManager.getBackendConfigFilePath(projectPath);
            const mergedOptions = {
                throwIfNotExist: true,
                ...options,
            };
            return this.getData(filePath, mergedOptions);
        };
        this.setLocalEnvInfo = (projectPath, localEnvInfo) => {
            const filePath = pathManager_1.pathManager.getLocalEnvFilePath(projectPath);
            jsonUtilities_1.JSONUtilities.writeJson(filePath, localEnvInfo);
        };
        this.setLocalAWSInfo = (projectPath, localAWSInfo) => {
            const filePath = pathManager_1.pathManager.getLocalAWSInfoFilePath(projectPath);
            jsonUtilities_1.JSONUtilities.writeJson(filePath, localAWSInfo);
        };
        this.setProjectFileTags = (projectPath, tags) => {
            const tagFilePath = pathManager_1.pathManager.getTagFilePath(projectPath);
            jsonUtilities_1.JSONUtilities.writeJson(tagFilePath, tags);
        };
        this.setProjectConfig = (projectPath, projectConfig) => {
            const filePath = pathManager_1.pathManager.getProjectConfigFilePath(projectPath);
            jsonUtilities_1.JSONUtilities.writeJson(filePath, projectConfig);
        };
        this.setTeamProviderInfo = (projectPath, teamProviderInfo) => {
            const filePath = pathManager_1.pathManager.getTeamProviderInfoFilePath(projectPath);
            jsonUtilities_1.JSONUtilities.writeJson(filePath, teamProviderInfo);
        };
        this.setBackendConfig = (projectPath, backendConfig) => {
            const filePath = pathManager_1.pathManager.getBackendConfigFilePath(projectPath);
            jsonUtilities_1.JSONUtilities.writeJson(filePath, backendConfig);
        };
        this.setMeta = (projectPath, meta) => {
            const filePath = pathManager_1.pathManager.getAmplifyMetaFilePath(projectPath);
            jsonUtilities_1.JSONUtilities.writeJson(filePath, meta);
        };
        this.setCurrentMeta = (projectPath, meta) => {
            const filePath = pathManager_1.pathManager.getCurrentAmplifyMetaFilePath(projectPath);
            jsonUtilities_1.JSONUtilities.writeJson(filePath, meta);
        };
        this.cliJSONFileExists = (projectPath, env) => fs.existsSync(pathManager_1.pathManager.getCLIJSONFilePath(projectPath, env));
        this.getCLIJSON = (projectPath, env, options) => {
            const filePath = pathManager_1.pathManager.getCLIJSONFilePath(projectPath, env);
            const mergedOptions = {
                throwIfNotExist: true,
                ...options,
            };
            return this.getData(filePath, mergedOptions);
        };
        this.setCLIJSON = (projectPath, cliJSON, env) => {
            const filePath = pathManager_1.pathManager.getCLIJSONFilePath(projectPath, env);
            jsonUtilities_1.JSONUtilities.writeJson(filePath, cliJSON, {
                keepComments: true,
            });
        };
        this.getData = (filePath, options) => {
            var _a;
            const data = jsonUtilities_1.JSONUtilities.readJson(filePath, {
                throwIfNotExist: (_a = options === null || options === void 0 ? void 0 : options.throwIfNotExist) !== null && _a !== void 0 ? _a : true,
            });
            return data !== null && data !== void 0 ? data : options === null || options === void 0 ? void 0 : options.default;
        };
    }
}
exports.StateManager = StateManager;
exports.stateManager = new StateManager();
//# sourceMappingURL=stateManager.js.map