export declare const PathConstants: {
    DotAWSDir: string;
    AWSCredentials: string;
    AWSConfig: string;
    AmplifyDirName: string;
    DotAmplifyDirName: string;
    DotConfigDirName: string;
    BackendDirName: string;
    CurrentCloudBackendDirName: string;
    AmplifyRcFileName: string;
    GitIgnoreFileName: string;
    ProjectConfigFileName: string;
    AmplifyMetaFileName: string;
    TagsFileName: string;
    LocalEnvFileName: string;
    LocalAWSInfoFileName: string;
    TeamProviderInfoFileName: string;
    BackendConfigFileName: string;
    CLIJSONFileName: string;
    CLIJSONFileNameGlob: string;
    CLIJsonWithEnvironmentFileName: (env: string) => string;
};
export declare class PathManager {
    private readonly homeDotAmplifyDirPath;
    constructor();
    getHomeDotAmplifyDirPath: () => string;
    getAmplifyDirPath: (projectPath?: string | undefined) => string;
    getDotConfigDirPath: (projectPath?: string | undefined) => string;
    getBackendDirPath: (projectPath?: string | undefined) => string;
    getCurrentCloudBackendDirPath: (projectPath?: string | undefined) => string;
    getAmplifyRcFilePath: (projectPath?: string | undefined) => string;
    getGitIgnoreFilePath: (projectPath?: string | undefined) => string;
    getTeamProviderInfoFilePath: (projectPath?: string | undefined) => string;
    getProjectConfigFilePath: (projectPath?: string | undefined) => string;
    getLocalEnvFilePath: (projectPath?: string | undefined) => string;
    getLocalAWSInfoFilePath: (projectPath?: string | undefined) => string;
    getAmplifyMetaFilePath: (projectPath?: string | undefined) => string;
    getBackendConfigFilePath: (projectPath?: string | undefined) => string;
    getTagFilePath: (projectPath?: string | undefined) => string;
    getCurrentTagFilePath: (projectPath?: string | undefined) => string;
    getCurrentAmplifyMetaFilePath: (projectPath?: string | undefined) => string;
    getCurrentBackendConfigFilePath: (projectPath?: string | undefined) => string;
    getDotAWSDirPath: () => string;
    getAWSCredentialsFilePath: () => string;
    getAWSConfigFilePath: () => string;
    getCLIJSONFilePath: (projectPath: string, env?: string | undefined) => string;
    private constructPath;
    private validateProjectPath;
    findProjectRoot: () => string | undefined;
    private createNotInitializedError;
}
export declare const pathManager: PathManager;
//# sourceMappingURL=pathManager.d.ts.map