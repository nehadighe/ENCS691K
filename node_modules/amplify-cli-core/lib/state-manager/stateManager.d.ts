import { $TSMeta, $TSTeamProviderInfo, $TSAny } from '..';
import { Tag } from '../tags';
export declare type GetOptions<T> = {
    throwIfNotExist?: boolean;
    preserveComments?: boolean;
    default?: T;
};
export declare class StateManager {
    metaFileExists: (projectPath?: string | undefined) => boolean;
    getMeta: (projectPath?: string | undefined, options?: GetOptions<any> | undefined) => $TSMeta;
    currentMetaFileExists: (projectPath?: string | undefined) => boolean;
    getCurrentMeta: (projectPath?: string | undefined, options?: GetOptions<any> | undefined) => $TSMeta;
    getProjectTags: (projectPath?: string | undefined) => Tag[];
    getCurrentProjectTags: (projectPath?: string | undefined) => Tag[];
    teamProviderInfoExists: (projectPath?: string | undefined) => boolean;
    getTeamProviderInfo: (projectPath?: string | undefined, options?: GetOptions<any> | undefined) => $TSTeamProviderInfo;
    localEnvInfoExists: (projectPath?: string | undefined) => boolean;
    getLocalEnvInfo: (projectPath?: string | undefined, options?: GetOptions<any> | undefined) => $TSAny;
    getLocalAWSInfo: (projectPath?: string | undefined, options?: GetOptions<any> | undefined) => $TSAny;
    projectConfigExists: (projectPath?: string | undefined) => boolean;
    getProjectConfig: (projectPath?: string | undefined, options?: GetOptions<any> | undefined) => $TSAny;
    backendConfigFileExists: (projectPath?: string | undefined) => boolean;
    getBackendConfig: (projectPath?: string | undefined, options?: GetOptions<any> | undefined) => $TSAny;
    setLocalEnvInfo: (projectPath: string | undefined, localEnvInfo: $TSAny) => void;
    setLocalAWSInfo: (projectPath: string | undefined, localAWSInfo: $TSAny) => void;
    setProjectFileTags: (projectPath: string | undefined, tags: Tag[]) => void;
    setProjectConfig: (projectPath: string | undefined, projectConfig: $TSAny) => void;
    setTeamProviderInfo: (projectPath: string | undefined, teamProviderInfo: $TSTeamProviderInfo) => void;
    setBackendConfig: (projectPath: string | undefined, backendConfig: $TSAny) => void;
    setMeta: (projectPath: string | undefined, meta: $TSMeta) => void;
    setCurrentMeta: (projectPath: string | undefined, meta: $TSMeta) => void;
    cliJSONFileExists: (projectPath: string, env?: string | undefined) => boolean;
    getCLIJSON: (projectPath: string, env?: string | undefined, options?: GetOptions<any> | undefined) => $TSAny;
    setCLIJSON: (projectPath: string, cliJSON: any, env?: string | undefined) => void;
    private getData;
}
export declare const stateManager: StateManager;
//# sourceMappingURL=stateManager.d.ts.map